#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:fast
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура МокСерверДоступен(Фреймворк) Экспорт
	
	// given
	URL = "http://mock-server:1080";
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина).ОжидатьOpenAPI("file:/tmp/receiver.yaml", """version"": ""200""");
	Мок = Неопределено;
	// when
	Результат = КоннекторHTTP.Get(URL + "/version");
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = КоннекторHTTP.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """message""");

КонецПроцедуры

// @unit-test
Процедура Тест_ДополнитьКоллекциюТекстомИзПотока(Фреймворк) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток);
	Значение = "Туточки текст потока";
	ЗаписьТекста.Записать(Значение);
   	ЗаписьТекста.Закрыть();

	Коллекция = Новый Структура("Ключ1", "Значение1");
	ОбщегоНазначения.ДополнитьКоллекциюТекстомИзПотока(Поток, "Ключ2", Коллекция);
   	Поток.Закрыть();

   	Фреймворк.ПроверитьРавенство( Значение, Коллекция.Ключ2 );

КонецПроцедуры





// TODO актуальные методы??

// @unit-test
Процедура Тест_МетодьПотокВКоллекциюКакJSON(Фреймворк) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток);
	ЭталонJSON = "{
				 |""Сообщение"": ""ТекстСообщения""
				 |}";
	ЗаписьТекста.Записать(ЭталонJSON);
   	ЗаписьТекста.Закрыть();

	Коллекция1 = Неопределено;
	ОбщегоНазначения.ПотокВКоллекциюКакJSON(Поток, Истина, Истина, Коллекция1);
	
	Коллекция2 = Неопределено;
	ОбщегоНазначения.ПотокВКоллекциюКакJSON(Поток, Ложь, Истина, Коллекция2);
	
	Коллекция3 = Неопределено;
	ОбщегоНазначения.ПотокВКоллекциюКакJSON(Поток, Ложь, Ложь, Коллекция3);

   	Поток.Закрыть();

   	Фреймворк.ПроверитьТип( Коллекция1, "Соответствие" );
   	Фреймворк.ПроверитьТип( Коллекция2, "Структура" );
   	Фреймворк.ПроверитьРавенство( Коллекция1.Получить("json"), ЭталонJSON );
   	Фреймворк.ПроверитьРавенство( Коллекция2.json, ЭталонJSON );
   	Фреймворк.ПроверитьЛожь( Коллекция3.Свойство("json") );
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Пауза(Знач Ждать) Экспорт
	ОкончаниеПаузы = ТекущаяДата() + Ждать;
	Пока (Истина) Цикл
		Если ТекущаяДата() >= ОкончаниеПаузы Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Функция КакТекст(Знач Ответ, Знач Кодировка = Неопределено) Экспорт
	
	Возврат КоннекторHTTP.КакТекст(Ответ, Кодировка);

КонецФункции

Процедура СправочникиУдалитьВсеДанные( Знач ИменаСправочников ) Экспорт
	
	МассивИмен = СтрРазделить(ИменаСправочников, ",");
	
	Для Каждого Элемент Из МассивИмен Цикл
		
		ЭлементыСправочника = Справочники[СокрЛП(Элемент)].Выбрать();
		Пока ЭлементыСправочника.Следующий() Цикл
			Объект = ЭлементыСправочника.ПолучитьОбъект();
			Объект.Удалить();
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрыСведенийУдалитьВсеДанные( Знач ИменаРегистровСведений ) Экспорт
	
	МассивИмен = СтрРазделить(ИменаРегистровСведений, ",");
	
	Для Каждого Элемент Из МассивИмен Цикл
		НаборЗаписей = РегистрыСведений[СокрЛП(Элемент)].СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ОтборЖурналаРегистрации( Знач Событие, Знач Уровень = "Информация" ) Экспорт
	
	Возврат Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации[Уровень], Событие);
	
КонецФункции

Функция СобытияЖурналаРегистрации( Знач Отбор, Знач Секунд = 2 ) Экспорт

	Пауза(Секунд);
	Результат = Новый ТаблицаЗначений();
	ВыгружаемыеКолонки = "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий";
	ВыгрузитьЖурналРегистрации(Результат, Отбор, ВыгружаемыеКолонки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти