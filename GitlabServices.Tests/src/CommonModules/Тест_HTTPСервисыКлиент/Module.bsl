#Область СлужебныйПрограммныйИнтерфейс

//@unit-test
Процедура Тест_ОписаниеСервисаСоответствуетЭталону(Фреймворк) Экспорт

	Тест_HTTPСервисыСервер.УстановитьОбрабатыватьЗапросыВнешнегоХранилища(Истина);
	
	ОписаниеСервиса = Тест_HTTPСервисыСервер.ОписаниеСервиса("фэйк");
	Фреймворк.ПроверитьРавенство(ОписаниеСервиса, Неопределено);
	
	ОписаниеСервиса = Тест_HTTPСервисыСервер.ОписаниеСервиса("gitlab");
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.Свойство("name"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.Свойство("desc"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.Свойство("enabled"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.Свойство("templates"));
	Фреймворк.ПроверитьРавенство(ОписаниеСервиса.templates.Количество(), 2);
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].Свойство("name"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].Свойство("desc"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].Свойство("template"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].Свойство("methods"));
	Фреймворк.ПроверитьРавенство(ОписаниеСервиса.templates[0].methods.Количество(), 1);
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].methods[0].Свойство("name"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].methods[0].Свойство("desc"));
	Фреймворк.ПроверитьИстину(ОписаниеСервиса.templates[0].methods[0].Свойство("method"));
	
	Тест_HTTPСервисыСервер.УстановитьОбрабатыватьЗапросыВнешнегоХранилища(Ложь);

КонецПроцедуры

// @unit-test
Процедура Тест_ОписаниеСервисаURL(Фреймворк) Экспорт
	
	//https://github.com/DoublesunRUS/ru.capralow.dt.unit.launcher/issues/20
	//URL = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("МестоположениеСервисовИБРаспределителя");
	URL = "http://transmitter/api/hs/gitlab";
	
	Фреймворк.ПроверитьЗаполненность(URL, "Нет URL (user_settings.json -> МестоположениеСервисовИБРаспределителя");
	Фреймворк.ПроверитьЛожь(ПустаяСтрока(URL), "URL не может быть пустым, проверьте user_settings.json.");
	
	BadURL = "йохохо";
	Шаблон = СтрШаблон("а = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(""%1"")", BadURL);
	Фреймворк.ПроверитьНеВыполнилось(Шаблон, "Ошибка работы с Интернет:   Couldn't resolve host name");

	BadURL = "";
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(BadURL);
	Фреймворк.ПроверитьТип(Ответ, "Неопределено", "Пустой адрес");

	BadURL = Новый Массив;
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(BadURL);
	Фреймворк.ПроверитьТип(Ответ, "Неопределено", "Неверный тип");
	
	BadURL = URL + "йохохо";
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(BadURL);
	Фреймворк.ПроверитьТип(Ответ, "Неопределено", "Ошибка в имени сервиса");
	
	BadURL = "http://www.example.com";
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(BadURL);
	Фреймворк.ПроверитьТип(Ответ, "Неопределено", "Ошибка преобразования тела ответа в коллекцию данных");
	
	BadURL = "http://www.example.com/NotFound";
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(BadURL);
	Фреймворк.ПроверитьТип(Ответ, "Неопределено", "Страница не найдена");

	// 200
	Ответ = Тест_HTTPСервисыСервер.ОписаниеСервисаURL(URL + "/services");
	Фреймворк.ПроверитьИстину(Ответ.Свойство("Ответ"));
	Фреймворк.ПроверитьТип(Ответ.Ответ, "Структура", "Веб-сервис не отвечает.");
	Фреймворк.ПроверитьЗаполненность(Ответ.Ответ, "Ответ веб-сервиса не должен быть пустым.");
	Фреймворк.ПроверитьРавенство(Ответ.Ответ.КодСостояния, 200, "Веб-сервис отвечает, но с ошибкой.");

	Фреймворк.ПроверитьРавенство(Ответ.Количество(), 3);
	Фреймворк.ПроверитьИстину(Ответ.Свойство("Ответ"));
	Фреймворк.ПроверитьИстину(Ответ.Свойство("Данные"));
	Фреймворк.ПроверитьИстину(Ответ.Свойство("json"));
	Фреймворк.ПроверитьВхождение(Ответ.json, """version""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """services""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """enabled""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """templates""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """template""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """methods""");
	Фреймворк.ПроверитьВхождение(Ответ.json, """method""");	

КонецПроцедуры

// @unit-test:fast
Процедура Тест_ServicesGET(Фреймворк) Экспорт
	
	//https://github.com/DoublesunRUS/ru.capralow.dt.unit.launcher/issues/20
	//URL = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("МестоположениеСервисовИБРаспределителя");
	URL = "http://transmitter/api/hs/gitlab";

	Результат = Тест_HTTPСервисыСервер.КоннекторHTTPGet(URL + "/services");
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);

	Поток = Результат.Тело.ОткрытьПотокДляЧтения();
	ЧтениеТекста = Новый ЧтениеТекста( Поток, КодировкаТекста.UTF8 );
	ТелоОтвета = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Поток.Закрыть();
	
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """version""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """services""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """enabled""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """templates""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """template""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """methods""");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """method""");	

КонецПроцедуры

// @unit-test:fast
Процедура Тест_WebhooksPOST(Фреймворк) Экспорт
	
	//https://github.com/DoublesunRUS/ru.capralow.dt.unit.launcher/issues/20
	//URL = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("МестоположениеСервисовИБРаспределителя");
	URL = "http://transmitter/api/hs/gitlab";
	ЭталонWebHookGitLab = Фреймворк.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ЭталонWebHookGitLab");
	
	BadURLEpf = URL + "/webhooks/epf3/push";
	BadURLPush = URL + "/webhooks/epf/push3";
	URL = URL + "/webhooks/epf/push";
	//https://github.com/DoublesunRUS/ru.capralow.dt.unit.launcher/issues/20
	//ПутьЭталонWebHookGitLab = Фреймворк.Объект.КаталогПроекта + ЭталонWebHookGitLab;
	ПутьЭталонWebHookGitLab = "C:\w\1c\workspace\gitlab-services\test\post-from-gitlab.json";
	
	СекретныйКлюч = "блаблаблаюниттест";	

	Тест_HTTPСервисыСервер.УстановитьОбрабатыватьЗапросыВнешнегоХранилища(Ложь);
	Тест_HTTPСервисыСервер.УдалитьЭлементыСправочникаОбработчикиСобытий(СекретныйКлюч);
	Тест_HTTPСервисыСервер.ДобавитьОбработчикСобытий("ЮнитТест1", СекретныйКлюч);
	
	// 403
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, "ФэйковыйСекретныйКлюч");
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 403);
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "Секретный ключ не найден");
	
	// 423
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 423);
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "Отключен функционал загрузки из внешнего хранилища.");
	
	Тест_HTTPСервисыСервер.УстановитьОбрабатыватьЗапросыВнешнегоХранилища(Истина);
	
	// 400
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Gitlab-Event", "Push Hook2");
	Заголовки.Вставить("X-Gitlab-Token", СекретныйКлюч);
	Дополнительно = Новый Структура("Заголовки", Заголовки);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400);
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета), "400 Push Hook2");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Gitlab-Event", "Push Hook");
	Заголовки.Вставить("X-Gitlab-Token", СекретныйКлюч);
	Дополнительно = Новый Структура("Заголовки", Заголовки);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(BadURLEpf, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400);
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета), "400 BadURLEpf");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Gitlab-Event", "Push Hook");
	Заголовки.Вставить("X-Gitlab-Token", СекретныйКлюч);
	Дополнительно = Новый Структура("Заголовки", Заголовки);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(BadURLPush, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 BadURLPush");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));
	
	// Без / ""checkout_sha"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
	JSON = "{
		   |  ""object_kind"": ""push"",
		   |  ""project_id"": 178,
		   |  ""project"": {
		   |    ""id"": 178,
		   |    ""name"": ""TestEpf"",
		   |    ""web_url"": ""http://git.a/a.strizhachuk/testepf"",
		   |    ""description"": """"
		   |  },
		   |  ""commits"": [
		   |    {
		   |      ""id"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |      ""message"": ""Merge branch ''ttt'' into ''master''\n\nTtt\n\nSee merge request a.strizhachuk/testepf!2""
		   |    },
		   |    {
		   |      ""id"": ""bb8c1e02e420afffe601ada9f1171991d0404e68"",
		   |      ""message"": ""test\n""
		   |    },
		   |    {
		   |      ""id"": ""2fb9499926026288d1e9b9c6586338fff4ec996b"",
		   |      ""message"": ""test\n""
		   |    }
		   |  ],
		   |  ""total_commits_count"": 3
		   |  }
		   |}";
		   
	Дополнительно = Новый Структура("JSON", JSON);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 checkout_sha");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));
	
	// Без ""project"": {
	JSON = "{
		   |  ""object_kind"": ""push"",
		   |  ""checkout_sha"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |  ""project_id"": 178,
		   |  ""commits"": [
		   |    {
		   |      ""id"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |      ""message"": ""Merge branch ''ttt'' into ''master''\n\nTtt\n\nSee merge request a.strizhachuk/testepf!2""
		   |    },
		   |    {
		   |      ""id"": ""bb8c1e02e420afffe601ada9f1171991d0404e68"",
		   |      ""message"": ""test\n""
		   |    },
		   |    {
		   |      ""id"": ""2fb9499926026288d1e9b9c6586338fff4ec996b"",
		   |      ""message"": ""test\n""
		   |    }
		   |  ],
		   |  ""total_commits_count"": 3
		   |  }
		   |}";
		   
	Дополнительно = Новый Структура("JSON", JSON);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 project");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));

	// Без project / ""web_url"": ""http://git.a/a.strizhachuk/testepf"",		
	JSON = "{
		   |  ""object_kind"": ""push"",
		   |  ""checkout_sha"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |  ""project_id"": 178,
		   |  ""project"": {
		   |    ""id"": 178,
		   |    ""name"": ""TestEpf"",
		   |    ""description"": """"
		   |  },
		   |  ""commits"": [
		   |    {
		   |      ""id"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |      ""message"": ""Merge branch ''ttt'' into ''master''\n\nTtt\n\nSee merge request a.strizhachuk/testepf!2""
		   |    },
		   |    {
		   |      ""id"": ""bb8c1e02e420afffe601ada9f1171991d0404e68"",
		   |      ""message"": ""test\n""
		   |    },
		   |    {
		   |      ""id"": ""2fb9499926026288d1e9b9c6586338fff4ec996b"",
		   |      ""message"": ""test\n""
		   |    }
		   |  ],
		   |  ""total_commits_count"": 3
		   |  }
		   |}";
		   
	Дополнительно = Новый Структура("JSON", JSON);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 project/web_url");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));
	
 	// Без ""commits"": [
	JSON = "{
		   |  ""object_kind"": ""push"",
		   |  ""checkout_sha"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |  ""project_id"": 178,
		   |  ""project"": {
		   |    ""id"": 178,
		   |    ""name"": ""TestEpf"",
		   |    ""web_url"": ""http://git.a/a.strizhachuk/testepf"",
		   |    ""description"": """"
		   |  },
		   |  ""total_commits_count"": 3
		   |  }
		   |}";
		   
	Дополнительно = Новый Структура("JSON", JSON);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 commits");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));
	
 	// Без commits / ""id"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
	JSON = "{
		   |  ""object_kind"": ""push"",
		   |  ""checkout_sha"": ""87fc6b2782f1bcadce980cb52941e2bd90974c0f"",
		   |  ""project_id"": 178,
		   |  ""project"": {
		   |    ""id"": 178,
		   |    ""name"": ""TestEpf"",
		   |    ""web_url"": ""http://git.a/a.strizhachuk/testepf"",
		   |    ""description"": """"
		   |  },
		   |  ""commits"": [
		   |    {
		   |      ""message"": ""Merge branch ''ttt'' into ''master''\n\nTtt\n\nSee merge request a.strizhachuk/testepf!2""
		   |    },
		   |    {
		   |      ""id"": ""bb8c1e02e420afffe601ada9f1171991d0404e68"",
		   |      ""message"": ""test\n""
		   |    },
		   |    {
		   |      ""id"": ""2fb9499926026288d1e9b9c6586338fff4ec996b"",
		   |      ""message"": ""test\n""
		   |    }
		   |  ],
		   |  ""total_commits_count"": 3
		   |  }
		   |}";
		   
	Дополнительно = Новый Структура("JSON", JSON);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, Дополнительно);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 400, "400 commits/id");
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ТелоОтвета));
	
	// 200
	Адрес = "";
	ПоместитьФайл(Адрес, ПутьЭталонWebHookGitLab, , Ложь);
	Ответ = Тест_HTTPСервисыСервер.WebhooksPOST(URL, СекретныйКлюч, , Адрес);
	Фреймворк.ПроверитьРавенство(Ответ.КодСостояния, 200);
	ТелоОтвета = Тест_ОбщийМодульСервер.КакТекст(Ответ, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "Запрос обработан.");
	
	Тест_HTTPСервисыСервер.УстановитьОбрабатыватьЗапросыВнешнегоХранилища(Ложь);	
	Тест_HTTPСервисыСервер.УдалитьЭлементыСправочникаОбработчикиСобытий(СекретныйКлюч);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти