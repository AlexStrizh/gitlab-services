#Область СлужебныйПрограммныйИнтерфейс

// @unit-test
Процедура ДополнительныеДанные(Фреймворк) Экспорт
	
	// when
	Результат = Логирование.ДополнительныеДанные();
	// then
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 3);

КонецПроцедуры

// @unit-test
Процедура ТолькоСобытиеИнформация(Фреймворк) Экспорт
	
	// given
	Логирование.Информация( "Информация1.Информация2.Информация3", "обушки-воробушки" );
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Информация1.Информация2.Информация3" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Информация");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки", "Информация");
	
КонецПроцедуры

// @unit-test
Процедура ТолькоСобытиеПредупреждение(Фреймворк) Экспорт
	
	// given
	Логирование.Предупреждение( "Предупреждение1.Предупреждение2.Предупреждение3", "обушки-воробушки2" );
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Предупреждение1.Предупреждение2.Предупреждение3" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Предупреждение");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки2", "Предупреждение");
	
КонецПроцедуры

// @unit-test
Процедура ТолькоСобытиеОшибка(Фреймворк) Экспорт
	
	// given
	Логирование.Ошибка( "Ошибка1.Ошибка2.Ошибка3", "обушки-воробушки3" );
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Ошибка1.Ошибка2.Ошибка3" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Ошибка");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки3", "Ошибка");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеИнформацияСОбъектом(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	Попытка
		// given
		НовыйЭлемент = Справочники.ОбработчикиСобытий.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "ТестЛогирование";
		НовыйЭлемент.Записать();
		ДополнительныеДанные = Логирование.ДополнительныеДанные();
		ДополнительныеДанные.Объект = НовыйЭлемент;
		Логирование.Информация( "Информация11.Информация22.Информация33", "обушки-воробушки", ДополнительныеДанные );
		НовыйЭлемент.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Информация11.Информация22.Информация33" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Информация");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки", "Информация");
	Фреймворк.ПроверитьЛожь(ПустаяСтрока(Результат[0].ПредставлениеМетаданных), "Информация");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеПредупреждениеСОбъектом(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	Попытка
		// given
		НовыйЭлемент = Справочники.ОбработчикиСобытий.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "ТестЛогирование";
		НовыйЭлемент.Записать();
		ДополнительныеДанные = Логирование.ДополнительныеДанные();
		ДополнительныеДанные.Объект = НовыйЭлемент;
		Логирование.Предупреждение( "Предупреждение11.Предупреждение22.Предупреждение33", "обушки-воробушки2", ДополнительныеДанные );
		НовыйЭлемент.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Предупреждение11.Предупреждение22.Предупреждение33" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Предупреждение");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки2", "Предупреждение");
	Фреймворк.ПроверитьЛожь(ПустаяСтрока(Результат[0].ПредставлениеМетаданных), "Предупреждение");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеОшибкаСОбъектом(Фреймворк) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НовыйЭлемент = Справочники.ОбработчикиСобытий.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "ТестЛогирование";
		НовыйЭлемент.Записать();
		ДополнительныеДанные = Логирование.ДополнительныеДанные();
		ДополнительныеДанные.Объект = НовыйЭлемент;
		Логирование.Ошибка( "Ошибка11.Ошибка22.Ошибка33", "обушки-воробушки3", ДополнительныеДанные );
		НовыйЭлемент.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Ошибка11.Ошибка22.Ошибка33" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then	
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Ошибка");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки3", "Ошибка");
	Фреймворк.ПроверитьЛожь(ПустаяСтрока(Результат[0].ПредставлениеМетаданных), "Ошибка");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеИнформацияСОбъектомИHTTPСервисОтвет200(Фреймворк) Экспорт
	
	// given
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(200);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация111.Информация222.Информация333", "обушки-воробушки", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Информация111.Информация222.Информация333.200" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Информация");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки", "Информация");
	
	Эталон = "{
		| ""type"": ""info"",
		| ""message"": ""обушки-воробушки""
		|}";	
	
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 200, "Информация");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку(), Эталон, "Информация");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеПредупреждениеСОбъектомИHTTPСервисОтвет200(Фреймворк) Экспорт

	// given	
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(200);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Предупреждение( "Предупреждение111.Предупреждение222.Предупреждение333", "обушки-воробушки2", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Предупреждение111.Предупреждение222.Предупреждение333.200" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Предупреждение");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки2", "Предупреждение");
	
	Эталон = "{
		| ""type"": ""warning"",
		| ""message"": ""обушки-воробушки2""
		|}";	

	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 200, "Предупреждение");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку(), Эталон, "Предупреждение");

КонецПроцедуры

// @unit-test
Процедура СобытиеОшибкаСОбъектомИHTTPСервисОтвет200(Фреймворк) Экспорт

	// given	
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(200);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Ошибка( "Ошибка111.Ошибка222.Ошибка333", "обушки-воробушки3", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Ошибка111.Ошибка222.Ошибка333.200" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Ошибка");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки3", "Ошибка");
	
	Эталон = "{
		| ""type"": ""error"",
		| ""message"": ""обушки-воробушки3""
		|}";	

	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 200, "Ошибка");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку(), Эталон, "Ошибка");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеИнформацияСОбъектомИHTTPСервисОтвет400(Фреймворк) Экспорт

	// given
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(400);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация1111.Информация2222.Информация3333", "обушки-воробушки", ДополнительныеДанные );
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Информация1111.Информация2222.Информация3333.400" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Информация");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки", "Информация");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 400, "Информация");
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку()), "Информация");
	
КонецПроцедуры

// @unit-test
Процедура СобытиеПредупреждениеСОбъектомИHTTPСервисОтвет400(Фреймворк) Экспорт
	
	// given
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(400);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Предупреждение( "Предупреждение1111.Предупреждение2222.Предупреждение3333", "обушки-воробушки2", ДополнительныеДанные );
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Предупреждение1111.Предупреждение2222.Предупреждение3333.400" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Предупреждение");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки2", "Предупреждение");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 400, "Предупреждение");
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку()), "Предупреждение");

КонецПроцедуры

// @unit-test
Процедура СобытиеОшибкаСОбъектомИHTTPСервисОтвет400(Фреймворк) Экспорт

	// given	
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(400);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Ошибка( "Ошибка1111.Ошибка2222.Ошибка3333", "обушки-воробушки3", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	
	// then
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Ошибка1111.Ошибка2222.Ошибка3333.400" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
		
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 1, "Ошибка");
	Фреймворк.ПроверитьРавенство(Результат[0].Комментарий, "обушки-воробушки3", "Ошибка");
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 400, "Ошибка");
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку()), "Ошибка");

КонецПроцедуры

// @unit-test
Процедура СобытиеИнформацияHTTPСервисОтветТелоОтвета200(Фреймворк) Экспорт

	// given	
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(200);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация200.Информация200.Информация200", "обушки-воробушки", ДополнительныеДанные );
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "Информация200.Информация200.Информация200.200" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 200, "Информация200");
	ТелоОтвета = ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку();
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "info", "Информация200");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "обушки-воробушки", "Информация200");
	
КонецПроцедуры	

// @unit-test
Процедура СобытиеИнформацияHTTPСервисОтветТелоОтвета400(Фреймворк) Экспорт
	
	// given
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(400);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация400.Информация400.Информация400", "обушки-воробушки2", ДополнительныеДанные );
	
	// when
	Тест_ОбщийМодульСервер.Пауза(2);

	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "Информация400.Информация400.Информация400.400" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then			
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 400, "Информация400");
	Фреймворк.ПроверитьИстину(ПустаяСтрока(ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку()), "Информация400");

КонецПроцедуры	

// @unit-test
Процедура СобытиеИнформацияHTTPСервисОтветТелоОтвета403(Фреймворк) Экспорт

	// given	
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(403);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация403.Информация403.Информация403", "обушки-воробушки3", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "Информация403.Информация403.Информация403.403" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then		
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 403, "Информация403");
	ТелоОтвета = ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку();
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "info", "Информация403");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "обушки-воробушки3", "Информация403");

КонецПроцедуры	


// @unit-test
Процедура СобытиеИнформацияHTTPСервисОтветТелоОтвета423(Фреймворк) Экспорт
	
	// given
	ДополнительныеДанные = Логирование.ДополнительныеДанные();
	HTTPСервисОтвет = Новый HTTPСервисОтвет(423);
	ДополнительныеДанные.HTTPСервисОтвет = HTTPСервисОтвет;
	Логирование.Информация( "Информация423.Информация423.Информация423", "обушки-воробушки4", ДополнительныеДанные );

	// when
	Тест_ОбщийМодульСервер.Пауза(2);
	Результат = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(Результат, 
		Новый Структура("ДатаНачала, Уровень, Событие",
			ТекущаяДата() - 30, УровеньЖурналаРегистрации.Информация, "Информация423.Информация423.Информация423.423" ),
		"Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then		
	Фреймворк.ПроверитьРавенство(ДополнительныеДанные.HTTPСервисОтвет.КодСостояния, 423, "Информация423");
	ТелоОтвета = ДополнительныеДанные.HTTPСервисОтвет.ПолучитьТелоКакСтроку();
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "info", "Информация423");
	Фреймворк.ПроверитьВхождение(ТелоОтвета, "обушки-воробушки4", "Информация423");
	
КонецПроцедуры	

#КонецОбласти