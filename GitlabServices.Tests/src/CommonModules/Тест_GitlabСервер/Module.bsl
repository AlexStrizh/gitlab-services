#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПараметрыСоединения(Фреймворк) Экспорт
	
	// given
	Константы.GitLabUserPrivateToken.Установить("-U2ssrBsM4rmx85HXzZ1");
	Константы.ТаймаутGitLab.Установить(5);
	// when
	Результат = Gitlab.ПараметрыСоединения("http://www.example.org");
	// then
	Фреймворк.ПроверитьРавенство(Результат.Количество(), 3);
	Фреймворк.ПроверитьРавенство(Результат.Адрес, "http://www.example.org");
	Фреймворк.ПроверитьРавенство(Результат.Token, "-U2ssrBsM4rmx85HXzZ1");
	Фреймворк.ПроверитьРавенство(Результат.Таймаут, 5);

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПолучитьФайлФэйкURL(Фреймворк) Экспорт
	
	// given
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить( "Адрес", "http://фэйк" );
	ПараметрыСоединения.Вставить( "Token", "-U2ssrBsM4rmx85HXzZ1" );
	ПараметрыСоединения.Вставить( "Таймаут", 5 );

	Commit = "ef3529e5486ff39c6439ab5d745eb56588202b86";
	ПутьКФайлу = КодироватьСтроку("Каталог с отчетами и обработками/Внешняя Обработка 1.epf",
									СпособКодированияСтроки.КодировкаURL );
	ПутьКФайлу = СтрШаблон("/api/v4/projects/1/repository/files/%1/raw?ref=%2", ПутьКФайлу, Commit);
	
	// when
	Результат = Gitlab.ПолучитьФайл(ПараметрыСоединения, ПутьКФайлу);
	
	// then
	Фреймворк.ПроверитьНеРавенство(Результат.Ошибка, Неопределено);

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПолучитьФайл404NotFound(Фреймворк) Экспорт

	// given
	URL = "http://mock-server:1080";

	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить( "Адрес", URL );
	ПараметрыСоединения.Вставить( "Token", "-U2ssrBsM4rmx85HXzZ1" );
	ПараметрыСоединения.Вставить( "Таймаут", 5 );
	
	ФэйкПутьКФайлу = "/фэйк.epf";

	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина)
    	.Когда(
			Мок.Запрос()
				.Метод("GET")
				.Путь("/%D1%84%D1%8D%D0%B9%D0%BA.epf")
				.Заголовки()
					.Заголовок("PRIVATE-TOKEN", "-U2ssrBsM4rmx85HXzZ1")
    	)
	    .Ответить(
	        Мок.Ответ()
	        	.КодОтвета(404)
	    );
	Мок = Неопределено;

	// when
	Результат = Gitlab.ПолучитьФайл(ФэйкПутьКФайлу, ПараметрыСоединения);
	
	// then
	Фреймворк.ПроверитьНеРавенство(Результат.Ошибка, Неопределено);
	Фреймворк.ПроверитьВхождение(Результат.Ошибка, HTTPStatusCodesClientServerCached.FindIdByCode(404));
	
КонецПроцедуры

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПолучитьФайл401Unauthorized(Фреймворк) Экспорт
	
	// given
	URL = "http://mock-server:1080";
	ФэйкGitLabUserPrivateToken = "1234567890";
	
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить( "Адрес", URL );
	ПараметрыСоединения.Вставить( "Token", ФэйкGitLabUserPrivateToken );
	ПараметрыСоединения.Вставить( "Таймаут", 5 );
		
	Commit = "ef3529e5486ff39c6439ab5d745eb56588202b86";
	ПутьКФайлу = КодироватьСтроку(	"Каталог с отчетами и обработками/Внешняя Обработка 1.epf",
									СпособКодированияСтроки.КодировкаURL );
	ПутьКФайлу = СтрШаблон("/api/v4/projects/1/repository/files/%1/raw?ref=%2", ПутьКФайлу, Commit);

	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина)
    	.Когда(
			Мок.Запрос()
				.Метод("GET")
				.Путь("/api/v4/projects/1/repository/files/%D0%9A%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%20%D1%81%20%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%D0%BC%D0%B8%2F%D0%92%D0%BD%D0%B5%D1%88%D0%BD%D1%8F%D1%8F%20%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%201.epf/raw")
				.ПараметрСтрокиЗапроса("ref", "ef3529e5486ff39c6439ab5d745eb56588202b86")
				.Заголовки()
					.Заголовок("PRIVATE-TOKEN", "!-U2ssrBsM4rmx85HXzZ1")
    	)
	    .Ответить(
	        Мок.Ответ()
	        	.КодОтвета(401)
	    );
	Мок = Неопределено;

	// when
	Результат = Gitlab.ПолучитьФайл(ПараметрыСоединения, ПутьКФайлу);
	
	// then
	Фреймворк.ПроверитьНеРавенство(Результат.Ошибка, Неопределено);
	Фреймворк.ПроверитьВхождение(Результат.Ошибка, HTTPStatusCodesClientServerCached.FindIdByCode(401));
	
КонецПроцедуры

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПолучитьФайл200Ok(Фреймворк) Экспорт
	
	// given	
	URL = "http://mock-server:1080";
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить( "Адрес", URL );
	ПараметрыСоединения.Вставить( "Token", "-U2ssrBsM4rmx85HXzZ1" );
	ПараметрыСоединения.Вставить( "Таймаут", 5 );
	
	Commit = "ef3529e5486ff39c6439ab5d745eb56588202b86";
	ПутьКФайлу = КодироватьСтроку(	"Каталог с отчетами и обработками/Внешняя Обработка 1.epf",
									СпособКодированияСтроки.КодировкаURL );
	ПутьКФайлу = СтрШаблон("/api/v4/projects/1/repository/files/%1/raw?ref=%2", ПутьКФайлу, Commit);
	
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина)
    	.Когда(
			Мок.Запрос()
				.Метод("GET")
				.Путь("/api/v4/projects/1/repository/files/%D0%9A%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%20%D1%81%20%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%D0%BC%D0%B8%2F%D0%92%D0%BD%D0%B5%D1%88%D0%BD%D1%8F%D1%8F%20%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%201.epf/raw")
				.ПараметрСтрокиЗапроса("ref", "ef3529e5486ff39c6439ab5d745eb56588202b86")
				.Заголовки()
					.Заголовок("PRIVATE-TOKEN", "-U2ssrBsM4rmx85HXzZ1")
    	)
	    .Ответить(
	        Мок.Ответ()
	        	.КодОтвета(200)
				.Заголовки()
					.Заголовок("X-Gitlab-File-Name", "ÐÐ½ÐµÑÐ½ÑÑ ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ° 1.epf")
				.Тело("some_response_body")
	    );
	Мок = Неопределено;

	// when
	Результат = Gitlab.ПолучитьФайл(ПараметрыСоединения, ПутьКФайлу);
	
	// then	
	Фреймворк.ПроверитьТип(Результат, "Структура");
	Фреймворк.ПроверитьРавенство(Результат.ИмяФайлаИзЗапроса, "Внешняя Обработка 1.epf");
	FromWin1251 = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку("Внешняя Обработка 1.epf", "windows-1251");
	Фреймворк.ПроверитьРавенство(Результат.ИмяФайла, FromWin1251);
	Фреймворк.ПроверитьТип(Результат.Данные, "ДвоичныеДанные");
	Фреймворк.ПроверитьРавенство(Результат.Ошибка, Неопределено);

КонецПроцедуры

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПолучитьФайлы(Фреймворк) Экспорт
	
	// given	
	URL = "http://mock-server:1080";
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить( "Адрес", URL );
	ПараметрыСоединения.Вставить( "Token", "-U2ssrBsM4rmx85HXzZ1" );
	ПараметрыСоединения.Вставить( "Таймаут", 5 );
	
	Commit = "ef3529e5486ff39c6439ab5d745eb56588202b86";
	ПутьКФайлу1 = КодироватьСтроку(	"Каталог с отчетами и обработками/Внешняя Обработка 1.epf",
									СпособКодированияСтроки.КодировкаURL );
	ПутьКФайлу1 = СтрШаблон("/api/v4/projects/1/repository/files/%1/raw?ref=%2", ПутьКФайлу1, Commit);
	ПутьКФайлу2 = КодироватьСтроку(	"Каталог с отчетами и обработками/Внешняя Обработка 2.epf",
									СпособКодированияСтроки.КодировкаURL );
	ПутьКФайлу2 = СтрШаблон("/api/v4/projects/1/repository/files/%1/raw?ref=%2", ПутьКФайлу2, Commit);

	ПутиКФайлам = Новый Массив;
	ПутиКФайлам.Добавить(ПутьКФайлу1);
	ПутиКФайлам.Добавить(ПутьКФайлу2);
	ПутиКФайлам.Добавить("/фэйк");
	
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина)
    	.Когда(
			Мок.Запрос()
				.Метод("GET")
				.Путь("/api/v4/projects/1/repository/files/%D0%9A%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%20%D1%81%20%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%D0%BC%D0%B8%2F%D0%92%D0%BD%D0%B5%D1%88%D0%BD%D1%8F%D1%8F%20%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%201.epf/raw")
				.ПараметрСтрокиЗапроса("ref", "ef3529e5486ff39c6439ab5d745eb56588202b86")
				.Заголовки()
					.Заголовок("PRIVATE-TOKEN", "-U2ssrBsM4rmx85HXzZ1")
    	)
	    .Ответить(
	        Мок.Ответ()
	        	.КодОтвета(200)
				.Заголовки()
					.Заголовок("X-Gitlab-File-Name", "ÐÐ½ÐµÑÐ½ÑÑ ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ° 1.epf")
				.Тело("some_response_body")
	    );
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL)
    	.Когда(
			Мок.Запрос()
				.Метод("GET")
				.Путь("/api/v4/projects/1/repository/files/%D0%9A%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%20%D1%81%20%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0%D0%BC%D0%B8%20%D0%B8%20%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%D0%BC%D0%B8%2F%D0%92%D0%BD%D0%B5%D1%88%D0%BD%D1%8F%D1%8F%20%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%202.epf/raw")
				.ПараметрСтрокиЗапроса("ref", "ef3529e5486ff39c6439ab5d745eb56588202b86")
				.Заголовки()
					.Заголовок("PRIVATE-TOKEN", "-U2ssrBsM4rmx85HXzZ1")
    	)
	    .Ответить(
	        Мок.Ответ()
	        	.КодОтвета(200)
				.Заголовки()
					.Заголовок("X-Gitlab-File-Name", "ÐÐ½ÐµÑÐ½ÑÑ ÐÐ±ÑÐ°Ð±Ð¾ÑÐºÐ° 2.epf")
				.Тело("some_response_body")
	    );
	Мок = Неопределено;

	// when
	Результат = Gitlab.ПолучитьФайлы(ПараметрыСоединения, ПутиКФайлам );
	
	// then	
	Фреймворк.ПроверитьТип(Результат, "Массив");
	Фреймворк.ПроверитьРавенство(Результат[0].ИмяФайлаИзЗапроса, "Внешняя Обработка 1.epf");
	FromWin1251 = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку("Внешняя Обработка 1.epf", "windows-1251");
	Фреймворк.ПроверитьРавенство(Результат[0].ИмяФайла, FromWin1251);
	Фреймворк.ПроверитьТип(Результат[0].Данные, "ДвоичныеДанные");
	Фреймворк.ПроверитьРавенство(Результат[0].Ошибка, Неопределено);
	Фреймворк.ПроверитьРавенство(Результат[1].ИмяФайлаИзЗапроса, "Внешняя Обработка 2.epf");
	FromWin1251 = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку("Внешняя Обработка 2.epf", "windows-1251");
	Фреймворк.ПроверитьРавенство(Результат[1].ИмяФайла, FromWin1251);
	Фреймворк.ПроверитьТип(Результат[1].Данные, "ДвоичныеДанные");
	Фреймворк.ПроверитьРавенство(Результат[1].Ошибка, Неопределено);
	Фреймворк.ПроверитьВхождение(Результат[2].Ошибка, "NOT_FOUND");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПутьКФайлуRAW(Фреймворк) Экспорт
	
	Эталон = "/api/v4/projects/1/repository/files/%D0%B0%2F%D0%B1%2F%D0%B2/raw?ref=0123456789";
	Результат = Gitlab.ПутьКФайлуRAW(1, "а/б/в", "0123456789");
	Фреймворк.ПроверитьРавенство(Результат, Эталон);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти
