#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура СформироватьОписаниеФайловМаршрутизации(Фреймворк) Экспорт
	
	// given
	Константы.ИмяФайлаНастроекМаршрутизации.Установить(".ext-epf.json");	
	// ОписаниеФайлов
	ОписаниеФайлов = Новый ТаблицаЗначений();
	ОписаниеФайлов.Колонки.Добавить( "ПутьКФайлуRAW", Новый ОписаниеТипов("Строка") );
	ОписаниеФайлов.Колонки.Добавить( "ИмяФайла", Новый ОписаниеТипов("Строка") );
	ОписаниеФайлов.Колонки.Добавить( "ПолноеИмяФайла", Новый ОписаниеТипов("Строка") );
	ОписаниеФайлов.Колонки.Добавить( "ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные"));
	ОписаниеФайлов.Колонки.Добавить( "Операция", Новый ОписаниеТипов("Строка") );
	ОписаниеФайлов.Колонки.Добавить( "Дата", Новый ОписаниеТипов("Дата") );
	ОписаниеФайлов.Колонки.Добавить( "CommitSHA", Новый ОписаниеТипов("Строка") );
	ОписаниеФайлов.Колонки.Добавить( "ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	// ДанныеЗапроса
	JSON = НСтр("ru = '{
				|  ""project"": {
				|    ""id"": 1,
				|    ""http_url"": ""http://example.com/root/external-epf.git""
				|  },
				|  ""commits"": [
				|    {
				|      ""id"": ""1b9949a21e6c897b3dcb4dd510ddb5f893adae2f"",
				|      ""timestamp"": ""2020-07-21T09:22:31+00:00""
				|    },
				|    {
				|      ""id"": ""968eca170a80a5c825b0808734cb5b109eaedcd3"",
				|      ""timestamp"": ""2020-07-21T09:22:32+00:00""
				|    }
				|  ]
				|}'");
	ПараметрыПреобразования = Новый Структура();
	ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
	ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	ДанныеЗапроса = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(JSON).ОткрытьПотокДляЧтения(), , ПараметрыПреобразования);

	// ПараметрыПроекта
	ПараметрыПроекта = Новый Структура;
	ПараметрыПроекта.Вставить("Идентификатор", "1");
	ПараметрыПроекта.Вставить("АдресСервера", "http://example.com");

	// when
	Маршрутизация.СформироватьОписаниеФайловМаршрутизации(ОписаниеФайлов, ДанныеЗапроса, ПараметрыПроекта);	
	
	// then
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов.Количество(), 2);
	
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].ПутьКФайлуRAW, "/api/v4/projects/1/repository/files/.ext-epf.json/raw?ref=1b9949a21e6c897b3dcb4dd510ddb5f893adae2f");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].CommitSHA, "1b9949a21e6c897b3dcb4dd510ddb5f893adae2f");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].ИмяФайла, "");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].ПолноеИмяФайла, ".ext-epf.json");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].Операция, "");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].Дата, Дата(2020,07,21,09,22,31));
	Фреймворк.ПроверитьЛожь(ЗначениеЗаполнено(ОписаниеФайлов[0].ДвоичныеДанные));
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[0].ОписаниеОшибки, "");
	
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].ПутьКФайлуRAW, "/api/v4/projects/1/repository/files/.ext-epf.json/raw?ref=968eca170a80a5c825b0808734cb5b109eaedcd3");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].CommitSHA, "968eca170a80a5c825b0808734cb5b109eaedcd3");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].ИмяФайла, "");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].ПолноеИмяФайла, ".ext-epf.json");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].Операция, "");
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].Дата, Дата(2020,07,21,09,22,32));
	Фреймворк.ПроверитьЛожь(ЗначениеЗаполнено(ОписаниеФайлов[1].ДвоичныеДанные));
	Фреймворк.ПроверитьРавенство(ОписаниеФайлов[1].ОписаниеОшибки, "");
	
КонецПроцедуры

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ДополнитьЗапросНастройкамиМаршрутизацииJSON(Фреймворк) Экспорт

	// given
	Константы.ИмяФайлаНастроекМаршрутизации.Установить(".ext-epf.json");	
	// ДанныеТелаЗапроса
	JSON = НСтр("ru = '{
				|  ""project"": {
				|    ""id"": 1,
				|    ""http_url"": ""http://example.com/root/external-epf.git""
				|  },
				|  ""commits"": [
				|    {
				|      ""id"": ""1b9949a21e6c897b3dcb4dd510ddb5f893adae2f""
				|    },
				|    {
				|      ""id"": ""968eca170a80a5c825b0808734cb5b109eaedcd3""
				|    }
				|  ]
				|}'");
	ПараметрыПреобразования = Новый Структура();
	ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
	ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	ДанныеЗапроса = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(JSON).ОткрытьПотокДляЧтения(), , ПараметрыПреобразования);

	//ДанныеДляОтправки
	ДанныеДляОтправки = Новый ТаблицаЗначений();
	ДанныеДляОтправки.Колонки.Добавить( "ПолноеИмяФайла", Новый ОписаниеТипов("Строка") );
	ДанныеДляОтправки.Колонки.Добавить( "ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные"));
	ДанныеДляОтправки.Колонки.Добавить( "Операция", Новый ОписаниеТипов("Строка") );
	ДанныеДляОтправки.Колонки.Добавить( "CommitSHA", Новый ОписаниеТипов("Строка") );
	ДанныеДляОтправки.Колонки.Добавить( "ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ДанныеДляОтправки.Добавить();
	НоваяСтрока.CommitSHA = "1b9949a21e6c897b3dcb4dd510ddb5f893adae2f";
	НоваяСтрока.ПолноеИмяФайла = ".ext-epf.json";
	НоваяСтрока.Операция = "added";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_1}");
	НоваяСтрока.ОписаниеОшибки = "";
	
	НоваяСтрока = ДанныеДляОтправки.Добавить();
	НоваяСтрока.CommitSHA = "1b9949a21e6c897b3dcb4dd510ddb5f893adae2f";
	НоваяСтрока.ПолноеИмяФайла = ".ext-epf.json";
	НоваяСтрока.Операция = "";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_2}");
	НоваяСтрока.ОписаниеОшибки = "";
	
	НоваяСтрока = ДанныеДляОтправки.Добавить();	
	НоваяСтрока.CommitSHA = "968eca170a80a5c825b0808734cb5b109eaedcd3";
	НоваяСтрока.ПолноеИмяФайла = ".ext-epf.json";
	НоваяСтрока.Операция = "";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_3}");
	НоваяСтрока.ОписаниеОшибки = "тут какая-то ошибка";

	// when
	Маршрутизация.ДополнитьЗапросНастройкамиМаршрутизацииJSON(ДанныеЗапроса, ДанныеДляОтправки);

	// then
	Фреймворк.ПроверитьРавенство(ДанныеЗапроса.Количество(), 2);
	Фреймворк.ПроверитьРавенство(ДанныеЗапроса.Получить("commits")[0].Получить("settings"), "{some_json_2}");
	Фреймворк.ПроверитьРавенство(ДанныеЗапроса.Получить("commits")[1].Получить("settings"), Неопределено);
	
КонецПроцедуры

#КонецОбласти