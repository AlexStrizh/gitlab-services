#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:fast
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура СервисПолучателяДоступен(Фреймворк) Экспорт
	
	// given
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер("http://host.docker.internal:1080").Сбросить();
	Настройки = "
		|		""version"": ""200""";
	Мок.ИмпортироватьНастройки("file:/tmp/receiver.yaml", Настройки);
	Мок = Неопределено;
	
	URL = "http://host.docker.internal:1080";
	
	// when
	Результат = КоннекторHTTP.Get(URL + "/version");
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	
	// when
	ТелоОтвета = КоннекторHTTP.КакТекст(Результат, КодировкаТекста.UTF8);
	// then
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """message""");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПередачаДвоичныхДанных(Фреймворк) Экспорт
	
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер("http://host.docker.internal:1080");
	
	URL = "http://host.docker.internal:1080";	

	// given
	// Не заданы параметры доставки	
	ИмяФайла = "ВнешняяОбработка1.epf";
	Данные = ПолучитьДвоичныеДанныеИзСтроки("Тест");
	ПараметрыДоставки = Новый Структура;
	// when
	Попытка
		ПередачаДанных.ОтправитьФайл(ИмяФайла, Данные, ПараметрыДоставки);
		ВызватьИсключение НСтр("ru = 'Передача данных без параметров доставки должна вызывать ошибку.'");
	Исключение
		// then
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Фреймворк.ПроверитьВхождение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
		 							"ожидалось свойство АдресДоставки");
	КонецПопытки;

	// given	
	// 403
	Мок.Сбросить();
	Настройки = "
		|		""update"": ""403""";
	Мок.ИмпортироватьНастройки("file:/tmp/receiver.yaml", Настройки);
	
	ПараметрыДоставки.Вставить("АдресДоставки", URL + "/update");
	ПараметрыДоставки.Вставить("Token", "12345678901234567890");
	ПараметрыДоставки.Вставить("Таймаут", 5);
	// when	
	Попытка
		ПередачаДанных.ОтправитьФайл(ИмяФайла, Данные, ПараметрыДоставки);
	Исключение
		// then
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Фреймворк.ПроверитьРавенство(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), "Error: 403");
	КонецПопытки;

	// given	
	// 200
	Мок.Сбросить();
	Настройки = "
		|		""update"": ""200""";
	Мок.ИмпортироватьНастройки("file:/tmp/receiver.yaml", Настройки);
	Мок = Неопределено;
	
	ПараметрыДоставки.Вставить("АдресДоставки", URL + "/update");
	ПараметрыДоставки.Вставить("Token", "12345678901234567890");
	ПараметрыДоставки.Вставить("Таймаут", 5);
	// when
	ПередачаДанных.ОтправитьФайл(ИмяФайла, Данные, ПараметрыДоставки);
	// then
	СообщенияПриПередачеДанных = ПолучитьСообщенияПользователю();	
	Фреймворк.ПроверитьВхождение(СообщенияПриПередачеДанных[0].Текст, "Любое сообщение...");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Процедура ПередачаДвоичныхДанныхВФоне(Фреймворк) Экспорт
	
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер("http://host.docker.internal:1080");
	
	URL = "http://host.docker.internal:1080";

	//given
	// Не заданы параметры доставки
	ПараметрыДоставки = Новый Структура;
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ВнешняяОбработка1.epf");
	ПараметрыЗадания.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Тест"));
	ПараметрыЗадания.Добавить(ПараметрыДоставки);
	// when
	ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("ПередачаДанных.ОтправитьФайл",
													ПараметрыЗадания);
	Результат = ЗаданиеОтправкаФайла.ОжидатьЗавершенияВыполнения();
	// then
	Фреймворк.ПроверитьРавенство(Результат.Состояние, СостояниеФоновогоЗадания.ЗавершеноАварийно);
	Фреймворк.ПроверитьРавенство(Результат.ПолучитьСообщенияПользователю().Количество(), 0);

	//given
	// 200
	Мок.Сбросить();
	Настройки = "
		|		""update"": ""200""";
	Мок.ИмпортироватьНастройки("file:/tmp/receiver.yaml", Настройки);
	
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("АдресДоставки", URL + "/update");
	ПараметрыДоставки.Вставить("Token", "12345678901234567890");
	ПараметрыДоставки.Вставить("Таймаут", 5);
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ВнешняяОбработка1.epf");
	ПараметрыЗадания.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Тест"));
	ПараметрыЗадания.Добавить(ПараметрыДоставки);	
	// when
	ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("ПередачаДанных.ОтправитьФайл",
													ПараметрыЗадания);
	Результат = ЗаданиеОтправкаФайла.ОжидатьЗавершенияВыполнения();	
	// then	
	Фреймворк.ПроверитьРавенство(Результат.Состояние, СостояниеФоновогоЗадания.Завершено);
	Фреймворк.ПроверитьВхождение(Результат.ПолучитьСообщенияПользователю()[0].Текст, "Любое сообщение...");

	// given
	// 200 (three files: two good, one bad)
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("АдресДоставки", URL + "/update");
	ПараметрыДоставки.Вставить("Token", "12345678901234567890");
	ПараметрыДоставки.Вставить("Таймаут", 5);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("ВнешняяОбработка1.epf");
	ПараметрыЗадания.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Тест"));
	ПараметрыЗадания.Добавить(ПараметрыДоставки);	

	// when
	МассивФоновыхЗаданий = Новый Массив;
	Для Индекс = 1 По 3 Цикл
		Если Индекс = 2 Тогда
			ПараметрыЗадания[2] = Новый Структура;
		Иначе
			ПараметрыЗадания[2] = ПараметрыДоставки;
		КонецЕсли;
		
		ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("ПередачаДанных.ОтправитьФайл",
											ПараметрыЗадания,
											"Индекс" + Индекс,
											"Тест.ПередачаДанных.ОтправитьФайл." + Индекс);
		МассивФоновыхЗаданий.Добавить(ЗаданиеОтправкаФайла.ОжидатьЗавершенияВыполнения(10));
	КонецЦикла;
	// then
	Фреймворк.ПроверитьРавенство(МассивФоновыхЗаданий[0].Состояние, СостояниеФоновогоЗадания.Завершено);
	Фреймворк.ПроверитьРавенство(МассивФоновыхЗаданий[1].Состояние, СостояниеФоновогоЗадания.ЗавершеноАварийно);
	Фреймворк.ПроверитьРавенство(МассивФоновыхЗаданий[2].Состояние, СостояниеФоновогоЗадания.Завершено);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти
