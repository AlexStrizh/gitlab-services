#Область СлужебныйПрограммныйИнтерфейс

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанных(Фреймворк) Экспорт
	
	// given
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	// ДанныеЗапроса
	JSON = НСтр("ru = '{
				|  ""checkout_sha"": ""какой-то коммит..."",
				|  ""project"": {
				|    ""id"": 1,
				|    ""http_url"": ""http://www.example.com/root/external-epf.git""
				|  },
				|  ""commits"": [
				|    {
				|      ""id"": ""какой-то коммит..."",
				|      ""timestamp"": ""2020-07-21T09:22:31+00:00"",
				|      ""added"": [
				|        "".ext-epf.json"",
				|        ""src/Внешняя Обработка 1.xml"",
				|        ""test3.epf""
				|      ],
				|      ""modified"": [
				|        ""Каталог 2/test2.epf"",
				|        ""Каталог 1/test1.epf""
				|      ],
				|      ""removed"": [
				|
				|      ]
				|    }
				|  ]
				|}'");
	ПараметрыПреобразования = Новый Структура();
	ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
	ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	ДанныеЗапроса = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(JSON).ОткрытьПотокДляЧтения(), , ПараметрыПреобразования);

	ЭталонRouting = "/home/usr1cv8/test/routing.json";
	Текст = Новый ЧтениеТекста(ЭталонRouting, КодировкаТекста.UTF8);
	Settings = Текст.Прочитать();
	Settings = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(Settings).ОткрытьПотокДляЧтения());
	
	ДанныеЗапроса.Получить("commits")[0].Вставить("settings", Settings);

	МенеджерЗаписи = РегистрыСведений.ДанныеЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ДанныеЗапроса);
	МенеджерЗаписи.Записать();
	
	// ОтправляемыеДанные
	ОтправляемыеДанные = Новый ТаблицаЗначений();
	ОтправляемыеДанные.Колонки.Добавить( "ПутьКФайлуRAW", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ПолноеИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные"));
	ОтправляемыеДанные.Колонки.Добавить( "Операция", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "Дата", Новый ОписаниеТипов("Дата") );
	ОтправляемыеДанные.Колонки.Добавить( "CommitSHA", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ОтправляемыеДанные.Добавить();
	НоваяСтрока.ПутьКФайлуRAW = "/api/v4/projects/1/repository/files/Каталог 1/test1.epf/raw?ref=какой-то коммит...";
	НоваяСтрока.ИмяФайла = "";
	НоваяСтрока.ПолноеИмяФайла = "Каталог 1/test1.epf";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{""name1"":""result1""}");
	НоваяСтрока.Операция = "modifed";
	НоваяСтрока.Дата = Дата(2020, 07, 21, 09, 22, 31);
	НоваяСтрока.CommitSHA = "какой-то коммит...";
	НоваяСтрока.ОписаниеОшибки = "тут какая-то ошибка";
	
	НоваяСтрока = ОтправляемыеДанные.Добавить();
	НоваяСтрока.ПутьКФайлуRAW = "/api/v4/projects/1/repository/files/Каталог 2/test2.epf/raw?ref=какой-то коммит...";
	НоваяСтрока.ИмяФайла = "test2.epf";
	НоваяСтрока.ПолноеИмяФайла = "Каталог 2/test2.epf";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_3}");
	НоваяСтрока.Операция = "modifed";
	НоваяСтрока.Дата = Дата(2020, 07, 21, 09, 22, 31);	
	НоваяСтрока.CommitSHA = "какой-то коммит...";
	НоваяСтрока.ОписаниеОшибки = "";
	
	МенеджерЗаписи = РегистрыСведений.ВнешниеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ОтправляемыеДанные);
	МенеджерЗаписи.Записать();
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Тест_ОбщийМодульСервер.Пауза(2);
	
	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхИнформация[0].Комментарий, "[ какой-то коммит... ]: отправляемых файлов: 1");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхИнформация[1].Комментарий, "[ какой-то коммит... ]: запущенных заданий: 2");

	
КонецПроцедуры



// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхРучнойЗапуск(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхWebhook(Фреймворк) Экспорт
	
	// given
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "Webhook");
	Данные = Новый Соответствие;
	Данные.Вставить("checkout_sha", "какой-то коммит...");
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, Данные);
	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхWebhookОтсутствуетCheckoutSHA(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "Webhook");
	Данные = Новый Соответствие;
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, Данные);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат, Неопределено);
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "В обрабатываемых данных отсутствует checkout_sha");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхWebhookОшибочныйТипДанных(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "Webhook");
	Данные = Новый Массив;
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, Данные);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат, Неопределено);
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "Неподдерживаемый формат обрабатываемых данных");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхЕстьАктивноеЗадание(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат, Неопределено);
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "[ какой-то коммит... ]: задание уже было запущено и активно");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхОшибкаЗапускаЗадания(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Ошибка, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "Webhook");
	Данные = Новый Соответствие;
	Данные.Вставить("checkout_sha", "какой-то коммит...");
	Данные.Вставить("error", Новый HTTPСоединение("localhost"));
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, Данные);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьРавенство(Результат, Неопределено);
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "[ какой-то коммит... ]: ошибка запуска обработки данных");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхДанныеЗапроса(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ОбработкаДанных.Окончание" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");

	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "[ какой-то коммит... ]: нет данных для отправки");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхОтправляемыеДанныеПусто(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ОбработкаДанных.Окончание" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	Данные = Новый Соответствие();
	Данные.Вставить("Ключ", "Значение");

	МенеджерЗаписи = РегистрыСведений.ДанныеЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные);
	МенеджерЗаписи.Записать();	
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрации, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрации[0].Комментарий, "[ какой-то коммит... ]: нет данных для отправки");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ОбработатьДанныеРучнойЗапускНетЗаписанныхДанных(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрацииИнформация = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ПодготовкаДанных" );
	ПараметрыОтбораЖурналаРегистрацииПредупреждение = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Core.ПодготовкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	// when
	ОбработкаДанных.ОбработатьДанные(ОбработчикСобытия.Ссылка, "какой-то коммит...", Неопределено);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрацииИнформация = Новый ТаблицаЗначений();
	ЖурналРегистрацииПредупреждение = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииИнформация, ПараметрыОтбораЖурналаРегистрацииИнформация, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииПредупреждение, ПараметрыОтбораЖурналаРегистрацииПредупреждение, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[0].Комментарий, "[ какой-то коммит... ]: загрузка ранее сохраненных данных");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииПредупреждение.Количество(), 2);
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииПредупреждение[0].Комментарий, "[ какой-то коммит... ]: [данные запроса]: не найдено");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииПредупреждение[1].Комментарий, "[ какой-то коммит... ]: [отправляемые данные]: не найдено");
	
КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ОбработатьДанныеРучнойЗапускЕстьЗаписанныеДанные(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрацииИнформация = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ПодготовкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	// ДанныеЗапроса
	ЭталонRouting = "/home/usr1cv8/test/routing.json";
	Текст = Новый ЧтениеТекста(ЭталонRouting, КодировкаТекста.UTF8);
	Settings = Текст.Прочитать();
	Settings = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(Settings).ОткрытьПотокДляЧтения());
	Commit = Новый Соответствие;
	Commit.Вставить("id", "какой-то коммит...");
	Commit.Вставить("settings", Settings);
	Commits = Новый Массив;
	Commits.Добавить(Commit);
	ДанныеЗапроса = Новый Соответствие;
	ДанныеЗапроса.Вставить("commits", Commits);

	МенеджерЗаписи = РегистрыСведений.ДанныеЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ДанныеЗапроса);
	МенеджерЗаписи.Записать();
	
	// ОтправляемыеДанные
	ОтправляемыеДанные = Новый ТаблицаЗначений();
	ОтправляемыеДанные.Колонки.Добавить( "ИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ПолноеИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные") );
	ОтправляемыеДанные.Колонки.Добавить( "Операция", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "CommitSHA", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ОписаниеОшибки", Новый ОписаниеТипов("Строка") );
	
	НоваяСтрока = ОтправляемыеДанные.Добавить();
	НоваяСтрока.CommitSHA = "какой-то коммит...";
	НоваяСтрока.ИмяФайла = "test1.epf";
	НоваяСтрока.ПолноеИмяФайла = "Каталог 1/test1.epf";
	НоваяСтрока.Операция = "modifed";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_4}");
	НоваяСтрока.ОписаниеОшибки = "";
	
	МенеджерЗаписи = РегистрыСведений.ВнешниеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ОтправляемыеДанные);
	МенеджерЗаписи.Записать();
	
	// when
	ОбработкаДанных.ОбработатьДанные(ОбработчикСобытия.Ссылка, "какой-то коммит...", Неопределено);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрацииИнформация = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииИнформация, ПараметрыОтбораЖурналаРегистрацииИнформация, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[0].Комментарий, "[ какой-то коммит... ]: загрузка ранее сохраненных данных");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[1].Комментарий, "[ какой-то коммит... ]: [данные запроса]: загружено");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[2].Комментарий, "[ какой-то коммит... ]: [отправляемые данные]: загружено");

КонецПроцедуры

// @unit-test
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура ОбработатьДанныеWebhookУспешнаяПодготовкаДанных(Фреймворк) Экспорт
	
	// given
	URL = "http://mock-server:1080";
	ПараметрыОтбораЖурналаРегистрации = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ПодготовкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "Webhook");
	
	// ДанныеЗапроса
	JSON = НСтр("ru = '{
				|  ""project"": {
				|    ""id"": 1,
				|    ""http_url"": """ + URL + "/root/external-epf.git""
				|  },
				|  ""commits"": [
				|    {
				|      ""id"": ""1b9949a21e6c897b3dcb4dd510ddb5f893adae2f"",
				|      ""timestamp"": ""2020-07-21T09:22:31+00:00"",
				|      ""added"": [
				|        "".ext-epf.json"",
				|        ""src/Внешняя Обработка 1.xml"",
				|        ""test3.epf""
				|      ],
				|      ""modified"": [
				|        ""src/Внешняя Обработка 1/Forms/Форма/Ext/Form.bin"",
				|        ""test1.epf""
				|      ],
				|      ""removed"": [
				|
				|      ]
				|    },
				|    {
				|      ""id"": ""ef886bb4e372250d8212387350f7e139cbe5a1af"",
				|      ""timestamp"": ""2020-07-21T09:22:30+00:00"",
				|      ""added"": [
				|        "".ext-epf.json"",
				|        ""src/Внешняя Обработка 3/Forms/Форма/Ext/Form.bin"",
				|        ""test3.epf""
				|      ],
				|      ""modified"": [
				|        ""src/Внешняя Обработка 1/Forms/Форма.xml"",
				|        ""test1.epf""
				|      ],
				|      ""removed"": [
				|
				|      ]
				|    },
				|    {
				|      ""id"": ""968eca170a80a5c825b0808734cb5b109eaedcd3"",
				|      ""timestamp"": ""2020-03-16T16:00:15+03:00"",
				|      ""added"": [
				|
				|      ],
				|      ""modified"": [
				|        ""src/Внешняя Обработка 3/Forms/Форма.xml"",
				|        ""test9.epf"",
				|        ""test3.epf""
				|      ],
				|      ""removed"": [
				|
				|      ]
				|    }
				|  ]
				|}'");
	ПараметрыПреобразования = Новый Структура();
	ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
	ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	ДанныеЗапроса = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(JSON).ОткрытьПотокДляЧтения(), , ПараметрыПреобразования);

	// when
	ОбработкаДанных.ОбработатьДанные(ОбработчикСобытия.Ссылка, "какой-то коммит...", ДанныеЗапроса);
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрацииИнформация = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииИнформация, ПараметрыОтбораЖурналаРегистрации, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");

	// then
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[0].Комментарий, "[ какой-то коммит... ]: [данные запроса]: сохранено");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииИнформация[1].Комментарий, "[ какой-то коммит... ]: [отправляемые данные]: сохранено");
		
КонецПроцедуры

// @unit-test:dev
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
Процедура НачатьЗапускОбработкиДанныхЕстьАктивноеЗаданиеЗапускаФайла(Фреймворк) Экспорт
	
	// given
	ПараметрыОтбораЖурналаРегистрацииИнформация = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Информация, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	ПараметрыОтбораЖурналаРегистрацииПредупреждение = Новый Структура("ДатаНачала, Уровень, Событие", ТекущаяДата(), УровеньЖурналаРегистрации.Предупреждение, "ОбработчикиСобытий.Core.ОбработкаДанных" );
	Тест_ОбработчикиСобытийСервер.УдалитьВсеОбработчикиСобытий();
	НаборЗаписей = РегистрыСведений.ДанныеЗапросов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	НаборЗаписей = РегистрыСведений.ВнешниеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

	ОбработчикСобытия = Тест_ОбработчикиСобытийСервер.ДобавитьОбработчикСобытий("ЮнитТест1", "РучнойЗапуск");
	
	// ДанныеЗапроса
	JSON = НСтр("ru = '{
				|  ""checkout_sha"": ""какой-то коммит..."",
				|  ""project"": {
				|    ""id"": 1,
				|    ""http_url"": ""http://www.example.com/root/external-epf.git""
				|  },
				|  ""commits"": [
				|    {
				|      ""id"": ""какой-то коммит..."",
				|      ""timestamp"": ""2020-07-21T09:22:31+00:00"",
				|      ""added"": [
				|        "".ext-epf.json"",
				|        ""src/Внешняя Обработка 1.xml"",
				|        ""test3.epf""
				|      ],
				|      ""modified"": [
				|        ""Каталог 2/test2.epf"",
				|        ""Каталог 1/test1.epf""
				|      ],
				|      ""removed"": [
				|
				|      ]
				|    }
				|  ]
				|}'");
	ПараметрыПреобразования = Новый Структура();
	ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
	ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	ДанныеЗапроса = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(JSON).ОткрытьПотокДляЧтения(), , ПараметрыПреобразования);

	ЭталонRouting = "/home/usr1cv8/test/routing.json";
	Текст = Новый ЧтениеТекста(ЭталонRouting, КодировкаТекста.UTF8);
	Settings = Текст.Прочитать();
	Settings = HTTPConnector.JsonВОбъект(ПолучитьДвоичныеДанныеИзСтроки(Settings).ОткрытьПотокДляЧтения());
	
	ДанныеЗапроса.Получить("commits")[0].Вставить("settings", Settings);

	МенеджерЗаписи = РегистрыСведений.ДанныеЗапросов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ДанныеЗапроса);
	МенеджерЗаписи.Записать();
	
	// ОтправляемыеДанные
	ОтправляемыеДанные = Новый ТаблицаЗначений();
	ОтправляемыеДанные.Колонки.Добавить( "ПутьКФайлуRAW", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ПолноеИмяФайла", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные"));
	ОтправляемыеДанные.Колонки.Добавить( "Операция", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "Дата", Новый ОписаниеТипов("Дата") );
	ОтправляемыеДанные.Колонки.Добавить( "CommitSHA", Новый ОписаниеТипов("Строка") );
	ОтправляемыеДанные.Колонки.Добавить( "ОписаниеОшибки", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ОтправляемыеДанные.Добавить();
	НоваяСтрока.ПутьКФайлуRAW = "/api/v4/projects/1/repository/files/Каталог 2/test2.epf/raw?ref=какой-то коммит...";
	НоваяСтрока.ИмяФайла = "test2.epf";
	НоваяСтрока.ПолноеИмяФайла = "Каталог 2/test2.epf";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_3}");
	НоваяСтрока.Операция = "modifed";
	НоваяСтрока.Дата = Дата(2020, 07, 21, 09, 22, 31);	
	НоваяСтрока.CommitSHA = "какой-то коммит...";
	НоваяСтрока.ОписаниеОшибки = "";
	
	// Попытка отправить файл два раза и в каждом файле два адреса отправки
	НоваяСтрока = ОтправляемыеДанные.Добавить();
	НоваяСтрока.ПутьКФайлуRAW = "/api/v4/projects/1/repository/files/Каталог 2/test2.epf/raw?ref=какой-то коммит...";
	НоваяСтрока.ИмяФайла = "test2.epf";
	НоваяСтрока.ПолноеИмяФайла = "Каталог 2/test2.epf";
	НоваяСтрока.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("{some_json_3}");
	НоваяСтрока.Операция = "modifed";
	НоваяСтрока.Дата = Дата(2020, 07, 21, 09, 22, 31);	
	НоваяСтрока.CommitSHA = "какой-то коммит...";
	НоваяСтрока.ОписаниеОшибки = "";
	
	МенеджерЗаписи = РегистрыСведений.ВнешниеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбработчикСобытия = ОбработчикСобытия.Ссылка;
	МенеджерЗаписи.Ключ = "какой-то коммит...";
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ОтправляемыеДанные);
	МенеджерЗаписи.Записать();
	
	// when
	Результат = ОбработкаДанных.НачатьЗапускОбработкиДанных(ОбработчикСобытия.Ссылка, "какой-то коммит...");
	Тест_ОбщийМодульСервер.Пауза(2);
	ЖурналРегистрацииОбработкаДанныхИнформация = Новый ТаблицаЗначений();
	ЖурналРегистрацииОбработкаДанныхПредупреждение = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииОбработкаДанныхИнформация, ПараметрыОтбораЖурналаРегистрацииИнформация, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииОбработкаДанныхПредупреждение, ПараметрыОтбораЖурналаРегистрацииПредупреждение, "Дата, ПредставлениеСобытия, ПредставлениеМетаданных, ПредставлениеДанных, Комментарий");
	
	// then
	Фреймворк.ПроверитьТип(Результат, "ФоновоеЗадание");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхИнформация[0].Комментарий, "[ какой-то коммит... ]: отправляемых файлов: 2");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхИнформация[1].Комментарий, "[ какой-то коммит... ]: запущенных заданий: 2");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхПредупреждение[0].Комментарий, "Ключ задания: какой-то коммит...|http://receiver:8083/api/hs/gitlab|test2.epf");
	Фреймворк.ПроверитьВхождение(ЖурналРегистрацииОбработкаДанныхПредупреждение[1].Комментарий, "Ключ задания: какой-то коммит...|http://receiver:8081/api/hs/gitlab|test2.epf");
	
КонецПроцедуры

#КонецОбласти