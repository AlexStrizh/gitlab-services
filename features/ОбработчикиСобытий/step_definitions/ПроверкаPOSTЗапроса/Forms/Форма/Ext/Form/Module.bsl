
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)","ЯПодключаюTestClientЛогинПароль","Дано Я подключаю TestClient ""Этот клиент"" логин ""Пользователь"" пароль """"","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\TestClients\step_definitions\РаботаСTestClient.epf
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯДелаюPOSTЗапросНаСДаннымиПоКлючу(Парам01,Парам02,Парам03)","ЯДелаюPOSTЗапросНаСДаннымиПоКлючу","И Я делаю POST запрос на ""$$МестоположениеСервисовИБРаспределителя$$"" с данными ""$$ТелоPOSTЗапросаJSON$$"" по ключу ""$$GitlabToken$$""","","");
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)","ВКомандномИнтерфейсеЯВыбираю","Пусть В командном интерфейсе я выбираю 'Сервисы GitLab' 'Webhooks'","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопкуСИменем(Парам01)","ЯНажимаюНаКнопкуСИменем","И я нажимаю на кнопку с именем 'ФормаСоздать'","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ОткрылосьОкно(Парам01)","ОткрылосьОкно","Тогда открылось окно 'Webhooks (создание)'","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеЯВвожуТекст(Парам01,Парам02)","ВПолеЯВвожуТекст","И в поле 'Наименование' я ввожу текст 'ТестированиеДобавленияРедактированияУдаления'","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНажимаюНаКнопку(Парам01)","ЯНажимаюНаКнопку","И я нажимаю на кнопку 'Записать и закрыть'","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
//	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)","ЯЖдуЗакрытияОкнаВТечениеСекунд","И я жду закрытия окна 'Webhooks (создание)' в течение 5 секунд","",""); //уже был в C:\w\1c\git\vanessa-automation\features\Libraries\UITestRunner\step_definitions\РаботаСИнтерфейсом.epf
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПолучаюЭталонМаршрутизацииИзФайла(Парам01)","ЯПолучаюЭталонМаршрутизацииИзФайла","И Я получаю эталон маршрутизации из файла ""$$ЭталонПравилаМаршрутизации$$""","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

//&НаКлиенте
////Дано Я подключаю TestClient "Этот клиент" логин "Пользователь" пароль ""
////@ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03)
//Процедура ЯПодключаюTestClientЛогинПароль(Парам01,Парам02,Парам03) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

&НаСервереБезКонтекста
Функция РазобратьURL(URL)
	Возврат КоннекторHTTP.РазобратьURL(URL);
КонецФункции

&НаКлиенте
//И Я делаю POST запрос на "$$МестоположениеСервисовИБРаспределителя$$" с данными "$$ТелоPOSTЗапросаJSON$$" по ключу "$$GitlabToken$$"
//@ЯДелаюPOSTЗапросНаСДаннымиПоКлючу(Парам01,Парам02,Парам03)
Процедура ЯДелаюPOSTЗапросНаСДаннымиПоКлючу(Парам01,Парам02,Парам03) Экспорт
	
	ПараметрыСоединения = РазобратьURL(Парам01);
	АдресСервиса = СтрШаблон("%1/webhooks/epf/push", ПараметрыСоединения.Путь);
	
	HTTPСоединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Gitlab-Event", "Push Hook");
	Заголовки.Вставить("X-Gitlab-Token", Парам03);

	HTTPЗапрос = Новый HTTPЗапрос(АдресСервиса, Заголовки);
	
	ПолныйПуть = ПолучитьПолныйПуть(Парам02, Ванесса.Объект.КаталогПроекта);
	HTTPЗапрос.УстановитьИмяФайлаТела(ПолныйПуть);
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения к веб-сервису.'");
	КонецЕсли;
	
	СтруктураДанных = ДанныеТелаЗапроса(ПолныйПуть);
	Ванесса.СохранитьЗначениеВКонтекстСохраняемый("checkout_sha", СтруктураДанных.checkout_sha);
	Ванесса.СохранитьЗначениеВКонтекстСохраняемый("JSON", СтруктураДанных.JSON);
	
КонецПроцедуры

&НаСервереБезКонтекста
//Объединяем относительные пути файловой системы в один
// при передаче Путь = ../test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\test\file.txt
// при передаче Путь = ./test/file.txt и ПутьОтносительно=c:\work\ возращаем c:\work\test\file.txt
// если в начале нет точки, считаем этот путь полным. 
Функция ПолучитьПолныйПуть(Знач Путь, Знач ПутьОтносительно)
	Перем Результат;
	Результат = Путь;
	Если Лев(СокрЛП(Путь), 1) = "." Тогда 
		ФайлОбработки = Новый Файл(ПутьОтносительно);
		КаталогОбработки = ДополнитьСлешВПуть(ФайлОбработки.ПолноеИмя);
		ФайлПути = Новый Файл(КаталогОбработки + Путь);
		
		Результат = ФайлПути.ПолноеИмя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
&НаСервереБезКонтекста
Функция ДополнитьСлешВПуть(Знач Каталог) Экспорт
	Разделитель = "\";
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	
	Возврат Каталог;
КонецФункции


//&НаКлиенте
////Пусть В командном интерфейсе я выбираю 'Сервисы GitLab' 'Webhooks'
////@ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02)
//Процедура ВКомандномИнтерфейсеЯВыбираю(Парам01,Парам02) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

//&НаКлиенте
////И я нажимаю на кнопку с именем 'ФормаСоздать'
////@ЯНажимаюНаКнопкуСИменем(Парам01)
//Процедура ЯНажимаюНаКнопкуСИменем(Парам01) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

//&НаКлиенте
////Тогда открылось окно 'Webhooks (создание)'
////@ОткрылосьОкно(Парам01)
//Процедура ОткрылосьОкно(Парам01) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

//&НаКлиенте
////И в поле 'Наименование' я ввожу текст 'ТестированиеДобавленияРедактированияУдаления'
////@ВПолеЯВвожуТекст(Парам01,Парам02)
//Процедура ВПолеЯВвожуТекст(Парам01,Парам02) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

//&НаКлиенте
////И я нажимаю на кнопку 'Записать и закрыть'
////@ЯНажимаюНаКнопку(Парам01)
//Процедура ЯНажимаюНаКнопку(Парам01) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

//&НаКлиенте
////И я жду закрытия окна 'Webhooks (создание)' в течение 5 секунд
////@ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02)
//Процедура ЯЖдуЗакрытияОкнаВТечениеСекунд(Парам01,Парам02) Экспорт
//	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение "Не реализовано.";
//КонецПроцедуры

&НаКлиенте
//И Я получаю эталон маршрутизации из файла "$$ЭталонПравилаМаршрутизации$$"
//@ЯПолучаюЭталонМаршрутизацииИзФайла(Парам01)
Процедура ЯПолучаюЭталонМаршрутизацииИзФайла(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПолныйПуть = ПолучитьПолныйПуть(Парам01, Ванесса.Объект.КаталогПроекта);
	
	ПравилаМаршрутизации = ЭталонПравилМаршрутизации(ПолныйПуть);
	Ванесса.СохранитьЗначениеВКонтекстСохраняемый("JSONПравилМаршрутизации", ПравилаМаршрутизации.JSONПравилМаршрутизации);

КонецПроцедуры

&НаСервере
Функция ДанныеТелаЗапроса(ПутьКФайлу)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Структура = Новый Структура;
	Структура.Вставить("checkout_sha", ДанныеЗапроса.Получить("checkout_sha"));
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ПутьКФайлу, КодировкаТекста.UTF8);
	JSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Структура.Вставить("JSON", JSON);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ЭталонПравилМаршрутизации(ПутьКФайлу)
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ПутьКФайлу, КодировкаТекста.UTF8);
	JSONПравилМаршрутизации = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Структура = Новый Структура;
	Структура.Вставить("JSONПравилМаршрутизации", JSONПравилМаршрутизации);
	
	Возврат Структура;
	
КонецФункции