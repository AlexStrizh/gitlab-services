#Область ПрограммныйИнтерфейс

//Процедура ЗапуститьОбработкуДанныхВФоне(Знач ИдентификаторWebhook,
//											Знач ДанныеТелаЗапроса,
//											Знач ЭтоРучнойЗапуск = Ложь) Экспорт
//	
//	Перем ТекстСообщения;
//	Перем ПараметрыПроектаРепозитория;
//	Перем КлючЗапросаGitLab;	
//	Перем ПараметрыЗадания;
//	Перем АктивныеЗадания;
//	Перем ПараметрыЛогирования;
//	
//	ПараметрыЛогирования = Логирование.ДополнительныеПараметры(ИдентификаторWebhook);
//	
//	Если ТипЗнч(ДанныеТелаЗапроса) <> Тип("Соответствие") Тогда
//		
//		ТекстСообщения = НСтр("ru = 'Неверный формат данных в теле запроса.'");
//		Логирование.Ошибка( "Core.ОбработкаДанныхВФоне", ТекстСообщения, ПараметрыЛогирования );
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	КлючЗапросаGitLab = ДанныеТелаЗапроса.Получить("checkout_sha");
//	
//	Если КлючЗапросаGitLab = Неопределено Тогда
//		
//		ТекстСообщения = НСтр("ru = 'Запрос не идентифицирован (отсутствует checkout_sha).'");
//		Логирование.Ошибка( "Core.ОбработкаДанныхВФоне", ТекстСообщения, ПараметрыЛогирования );
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	ПараметрыПроектаРепозитория = ПараметрыПроектаИзТелаЗапроса(ДанныеТелаЗапроса);
//	АктивныеЗадания             = АктивныеЗадачиПоКлючу(КлючЗапросаGitLab);
//	
//	Если ЗначениеЗаполнено(АктивныеЗадания) Тогда
//		
//		ТекстСообщения = НСтр("ru = '%1: задание уже было запущено и активно.'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab);
//		Логирование.Предупреждение( "Core.ОбработкаДанныхВФоне", ТекстСообщения, ПараметрыЛогирования );
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	ПараметрыЗадания = Новый Массив;
//	ПараметрыЗадания.Добавить(ИдентификаторWebhook);
//	ПараметрыЗадания.Добавить(КлючЗапросаGitLab);
//	ПараметрыЗадания.Добавить(ДанныеТелаЗапроса);
//	ПараметрыЗадания.Добавить(ПараметрыПроектаРепозитория);
//	ПараметрыЗадания.Добавить(ЭтоРучнойЗапуск);
//
//	// Перехват всех ошибок с логированием происходит внутри фонового.
//	// Работу текущей процедуры не заворачивать в попытка...исключение. 
//	ФоновыеЗадания.Выполнить("СервисыGitLab.ФоноваяОбработкаДанныхЗапроса",
//							 ПараметрыЗадания,
//							 КлючЗапросаGitLab,
//							 "СервисыGitLab: " + КлючЗапросаGitLab);
//							 
//	ТекстСообщения = НСтр("ru = '%1: запущена обработка данных. Ручной запуск: %2.'");
//	ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab, Строка(ЭтоРучнойЗапуск));
//
//	Логирование.Информация("Core.ОбработкаДанныхВФоне.Начало", ТекстСообщения, ПараметрыЛогирования);
//	
//КонецПроцедуры


#Область Webhooks




//// Сохраняет исходные данные HTTP-запроса (См. РегистрСведений.ОбработчикиСобытий).
//// 
//// Параметры:
//// 	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//// 	Ключ - Строка - значение checkout_sha коммита;
//// 	ДанныеТелаЗапроса - (См. ПолучитьДанныеТелаЗапроса.ДанныеТелаЗапроса);
//Процедура СохранитьДанныеТелаЗапросаВИБ(Знач ИдентификаторWebhook, Знач Ключ, Знач ДанныеТелаЗапроса) Экспорт
//	
//	СохранитьДанныеВИБ(ИдентификаторWebhook, Ключ, "ДанныеТелаЗапроса", ДанныеТелаЗапроса);
//
//КонецПроцедуры
//
//// Сохраняет двоичные данные внешних файлов с их описанием (См. РегистрСведений.ОбработчикиСобытий).
//// 
//// Параметры:
//// 	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//// 	Ключ - Строка - значение checkout_sha коммита;
//// 	ДвоичныеДанные - (См. ПодготовитьДанныеДляОтправки);
//Процедура СохранитьДвоичныеДанныеВИБ(Знач ИдентификаторWebhook, Знач Ключ, Знач ДвоичныеДанные) Экспорт
//	
//	СохранитьДанныеВИБ(ИдентификаторWebhook, Ключ, "ДвоичныеДанные", ДвоичныеДанные);
//
//КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

// Поиск всех фоновых заданий по наименованию.
// 
// Параметры:
// 	Наименование - Строка - наименование фонового задания;
// Возвращаемое значение:
// 	- Массив из ФоновоеЗадание - найденные фоновые задания;
Функция ЗадачиПоНаименованию(Знач Наименование) Экспорт
	
	Перем ПараметрыОтбора;
	Перем ВсеФоновыеЗадания;
	
	ПараметрыОтбора = Новый Структура("Наименование", Наименование);
	ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
	
	Возврат ВсеФоновыеЗадания;
	
КонецФункции

#КонецОбласти

#Область ДанныеЗапроса

// Подготавливает необходимые данные для формирования запроса к api GitLab на получение данных по всем запросам на merge.  
// 
// Параметры:
//	ДанныеТелаЗапроса - Соответствие - преобразованные в Соответствие данные HTTP-запроса;
// Возвращаемое значение:
// 	Структура - Описание:
// * СекретныйКлюч - Строка - ключ пользователя с доступом к api GitLab;
// * URL - Строка - веб-адрес запроса на merge;
Функция СформироватьЗапросНаMergeRequests(Знач ДанныеТелаЗапроса) Экспорт
	
	Перем ПараметрыПроекта;
	
	Перем Схема;
	Перем ИмяСервера;
	Перем Проект;
	
	Перем Запрос;
	
	ПараметрыПроекта = ПараметрыПроектаИзТелаЗапроса(ДанныеТелаЗапроса);
	
	Схема      = ПараметрыПроекта.СтруктураURI.Схема;
	ИмяСервера = ПараметрыПроекта.СтруктураURI.Сервер;
	Проект     = ПараметрыПроекта.Идентификатор;
	
	Запрос = Новый Структура;
	Запрос.Вставить("URL", СтрШаблон("%1://%2/api/v4/projects/%3/merge_requests", Схема, ИмяСервера, Проект));
	Запрос.Вставить("СекретныйКлюч", НастройкаСервисов.GitLabUserPrivateToken());
	
	Возврат Запрос;
	
КонецФункции



#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//// Сохраняет "исходные данные HTTP-запроса" или "обрабатываемые файлы" (См. РегистрСведений.ОбработчикиСобытий).
//// 
//// Параметры:
//// 	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//// 	Ключ - Строка - значение checkout_sha коммита;
//// 	Ресурс - Строка - имя ресурса, в который записываются данные;
//// 	Данные - Соответствие - любое значение, сохраняется в формате ХранилищеЗначения;
//Процедура СохранитьДанныеВИБ(Знач ИдентификаторWebhook, Знач Ключ, Знач Ресурс, Знач Данные)
//	
//	Перем ТекстСообщения;
//	
//	Перем Блокировка;
//	Перем ЭлементБлокировки;
//	Перем ПараметрыКлюча;
//	Перем КлючЗаписи;
//	Перем ХранилищеЗначенияДанные;
//	Перем ЗаписываемыеДанные;
//	
////	Блокировка = Новый БлокировкаДанных;
////	ЭлементБлокировки       = Блокировка.Добавить("РегистрСведений.ДанныеОбработчиковСобытий");
////	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
////	ЭлементБлокировки.УстановитьЗначение("Идентификатор", ИдентификаторWebhook);
////	ЭлементБлокировки.УстановитьЗначение("Ключ", Ключ);
////	Блокировка.Заблокировать();
//
//	НачатьТранзакцию();	
//	Попытка
//		ПараметрыКлюча = Новый Структура;
//		ПараметрыКлюча.Вставить("Идентификатор", ИдентификаторWebhook);
//		ПараметрыКлюча.Вставить("Ключ", Ключ);
//		КлючЗаписи = РегистрыСведений.ДанныеОбработчиковСобытий.СоздатьКлючЗаписи(ПараметрыКлюча);
//		ХранилищеЗначенияДанные = Новый ХранилищеЗначения(Данные);
//		ЗаписываемыеДанные = Новый Структура(Ресурс, ХранилищеЗначенияДанные);
//		РегистрыСведений.ДанныеОбработчиковСобытий.ЗаписатьЗначенияРесурсов(КлючЗаписи, ЗаписываемыеДанные); 
//		ЗафиксироватьТранзакцию();
//	Исключение
//		Если ТранзакцияАктивна() Тогда
//			ОтменитьТранзакцию();
//		КонецЕсли;
//		
//		ТекстСообщения = НСтр("ru = 'Не удалось сохранить данные в ИБ для ресурса: %1.'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, Ресурс);
//		
//		ДополнительныеПараметры = Логирование.ДополнительныеДанные();
//		ДополнительныеПараметры.Объект = ИдентификаторWebhook;
//		Логирование.Предупреждение( "Core.СохранениеДанных", ТекстСообщения, ДополнительныеПараметры );
//		
//		Возврат;
//	
//	КонецПопытки;
//	
//КонецПроцедуры

#Область ФоновыеЗадания

//Процедура ФоноваяОбработкаДанныхЗапроса(Знач ИдентификаторWebhook,
//										Знач КлючЗапросаGitLab,
//										Знач ДанныеТелаЗапроса,
//										Знач ПараметрыПроектаРепозитория,
//										Знач ЭтоРучнойЗапуск = Ложь) Экспорт
//	
//	Перем ПараметрыЗапроса;
//	Перем ДанныеДляОтправки;
//	Перем ПараметрыДоставки;
//	Перем КлючОтправкиФайла;
//	Перем ТекстСообщения;
//	Перем ПараметрыЛогирования;
//	
//	ПараметрыЛогирования = Логирование.ДополнительныеПараметры(ИдентификаторWebhook);
//	
//	Попытка
//		
//		ПараметрыЗапроса = Новый Структура;
//		ПараметрыЗапроса.Вставить("КлючЗапросаGitLab", КлючЗапросаGitLab);
//		ПараметрыЗапроса.Вставить("ПараметрыПроектаРепозитория", ПараметрыПроектаРепозитория);
//		ПараметрыЗапроса.Вставить("ДанныеТелаЗапроса", ДанныеТелаЗапроса);
//		ПараметрыЗапроса.Вставить("ЭтоРучнойЗапуск", ЭтоРучнойЗапуск);
//		ПараметрыЗапроса = Новый ФиксированнаяСтруктура(ПараметрыЗапроса);
//		
//		ДанныеДляОтправки = ПодготовитьДанныеКОтправке(ИдентификаторWebhook, ПараметрыЗапроса);
//		ДанныеДляОтправки = Маршрутизация.РаспределитьОтправляемыеДанныеПоМаршрутам(ДанныеДляОтправки,ДанныеТелаЗапроса);
//		
//		Если ДанныеДляОтправки.Количество() = 0 Тогда
//			
//			ТекстСообщения = НСтр("ru = '%1: нет данных для отправки. Задание завершено.'");
//			ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab);
//			Логирование.Информация( "Core.ОбработкаДанныхВФоне", ТекстСообщения, ПараметрыЛогирования );
//			
//			Возврат;
//			
//		КонецЕсли;
//		
//		ПараметрыДоставки = НастройкаСервисов.ПараметрыПолучателя(); 
//		
//		Для каждого ТочкаДоставки Из ДанныеДляОтправки Цикл
//			
//			ПараметрыДоставки.АдресДоставки = ТочкаДоставки.Адрес;
//			
//			КлючОтправкиФайла = КлючЗапросаGitLab + "|" + ТочкаДоставки.ИмяФайла + "|" + ТочкаДоставки.Адрес;
//			
//			ПараметрыЗадания = Новый Массив;
//			ПараметрыЗадания.Добавить(ТочкаДоставки.ИмяФайла);
//			ПараметрыЗадания.Добавить(ТочкаДоставки.ДвоичныеДанные);
//			ПараметрыЗадания.Добавить(ПараметрыДоставки);
//			
//			// В 8.3.14 реализован иной способ ожидания выполнения заданий, возможен пересмотр обработки исключений.
//			Попытка
//				
//				АктивныеЗадания = АктивныеЗадачиПоКлючу(КлючОтправкиФайла);
//				
//				Если ЗначениеЗаполнено(АктивныеЗадания) Тогда
//					
//					ТекстСообщения = НСтр("ru = '%1: Задание отправки файла уже было запущено и активно: КлючФайла: %2'");
//					ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab, КлючОтправкиФайла);
//					Логирование.Предупреждение( "Core.ПередачаФайлаВИБПриемник", ТекстСообщения, ПараметрыЛогирования );
//					
//					Продолжить;
//					
//				КонецЕсли;
//				
//				ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("Получатели.ОтправитьФайл",
//																ПараметрыЗадания,
//																КлючОтправкиФайла,
//																"СервисыGitLab: " + КлючЗапросаGitLab);
//			Исключение
//				
//				ТекстСообщения = НСтр("ru = '%1: UUID: %2; %3'");
//				ТекстСообщения = СтрШаблон(ТекстСообщения,
//										   КлючЗапросаGitLab,
//										   ЗаданиеОтправкаФайла.УникальныйИдентификатор,
//										   ИнформацияОбОшибке().Описание);
//										   
//				Логирование.Ошибка("Core.ПередачаФайлаВИБПриемник", ТекстСообщения, ПараметрыЛогирования );
//				
//			КонецПопытки;
//			
//		КонецЦикла;
//		
//		ТекстСообщения = НСтр("ru = '%1: количество файлов к отправке: %2'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab, ДанныеДляОтправки.Количество());
//		Логирование.Информация("Core.ОбработкаДанныхВФоне.Окончание", ТекстСообщения, ПараметрыЛогирования );
//		
//	Исключение
//		
//		ТекстСообщения = НСтр("ru = '%1: %2'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, КлючЗапросаGitLab, ИнформацияОбОшибке().Описание);
//		Логирование.Ошибка("Core.ОбработкаДанныхВФоне", ТекстСообщения, ПараметрыЛогирования);
//		
//	КонецПопытки;
//	
//КонецПроцедуры

//Функция АктивныеЗадачиПоКлючу(Знач Ключ)
//	
//	Перем ПараметрыОтбора;
//	Перем ВсеФоновыеЗадания;
//	Перем АктивныеИсполнители;
//	
//	ПараметрыОтбора = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
//	ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
//	АктивныеИсполнители = Новый Массив;
//	Для каждого Фоновое Из ВсеФоновыеЗадания Цикл
//		Если Фоновое.Состояние = СостояниеФоновогоЗадания.Активно Тогда
//			АктивныеИсполнители.Добавить(Фоновое);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат АктивныеИсполнители;
//	
//КонецФункции

#КонецОбласти


#Область РаботаСДанными

// TODO к удалению
// Получает параметры проекта репозитория из преобразованных в Соответствие данных тела запроса.
// 
// Параметры:
// 	ДанныеТелаЗапроса - (См. ПолучитьДанныеТелаЗапроса.ДанныеТелаЗапроса).
// Возвращаемое значение:
// 	Структура - Описание:
// * Идентификатор - Строка - идентификатор проекта.
// * СтруктураURI - (См. ОбщегоНазначенияКлиентСервер.СтруктураURI). 
Функция ПараметрыПроектаИзТелаЗапроса(Знач ДанныеТелаЗапроса)
	
	Перем ОписаниеПроекта;
	Перем ВебАдрес;
	Перем Идентификатор;
	Перем СтруктураURI;
	
	Перем Результат;
	
	Результат = Новый Структура;
	
	Если ДанныеТелаЗапроса = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеПроекта = ДанныеТелаЗапроса.Получить("project");
	
	ВебАдрес      = ОписаниеПроекта.Получить("web_url");
	Идентификатор = Строка(ОписаниеПроекта.Получить("id"));
	Результат.Вставить("Идентификатор", Идентификатор);
	
	// TODO перепроверить вызов
	СтруктураURI = КоннекторHTTP.РазобратьURL(ВебАдрес);
	НачалоПуть = СтрНайти(ВебАдрес, СтруктураURI.Путь) - 1;
	URLСервера = ?(НачалоПуть >= 0, Лев(ВебАдрес, НачалоПуть), "" );
	СтруктураURI.Вставить( "URLСервера", URLСервера );
	Результат.Вставить("СтруктураURI", Новый ФиксированнаяСтруктура(СтруктураURI));
	
	Возврат Результат;
	
КонецФункции

//Функция ПодготовитьДанныеКОтправке(Знач ОбработчикСобытия, Знач Параметры)
//	
//	Перем ДанныеТелаЗапроса;
//	Перем ДанныеДляОтправки;
//	Перем ПараметрыЛогирования;
//	Перем ТекстСообщения;
//	
//	ДанныеТелаЗапроса = Параметры.ДанныеТелаЗапроса;
//
//	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
//
//	ТекстСообщения = НСтр("ru = '%1: подготовка данных к отправке.'");
//	ТекстСообщения = СтрШаблон(ТекстСообщения, Параметры.КлючЗапросаGitLab);
//
//	Логирование.Информация("Core.ПодготовкаДанных.Начало", ТекстСообщения, ПараметрыЛогирования);
//
//	Если Параметры.ЭтоРучнойЗапуск Тогда
//		//НовыйКлючЗаписи = Новый Структура("Идентификатор, Ключ", ОбработчикСобытия, Параметры.КлючЗапросаGitLab);
//		//КлючЗапроса = РегистрыСведений.ДанныеОбработчиковСобытий.СоздатьКлючЗаписи(НовыйКлючЗаписи);
//		ДанныеДляОтправки = ОбработчикиСобытий.ЗагрузитьВнешниеФайлы( ОбработчикСобытия, Параметры.КлючЗапросаGitLab);
//	Иначе
//
//		ДанныеДляОтправки = Gitlab.ПолучитьФайлыКОтправкеПоДаннымЗапроса(ОбработчикСобытия, ДанныеТелаЗапроса);
//		Маршрутизация.ДополнитьЗапросНастройкамиМаршрутизации(ДанныеТелаЗапроса, ДанныеДляОтправки);
//
//		ОбработчикиСобытий.СохранитьДанныеЗапроса(ОбработчикСобытия, Параметры.КлючЗапросаGitLab, ДанныеТелаЗапроса);
//		ОбработчикиСобытий.СохранитьВнешниеФайлы(ОбработчикСобытия, Параметры.КлючЗапросаGitLab, ДанныеДляОтправки);
//	КонецЕсли;
//	
//	ТекстСообщения = НСтр("ru = '%1: подготовка данных к отправке.'");
//	ТекстСообщения = СтрШаблон(ТекстСообщения, Параметры.КлючЗапросаGitLab);
//	Логирование.Информация("Core.ПодготовкаДанных.Окончание", ТекстСообщения, ПараметрыЛогирования );
//	
//	Возврат ДанныеДляОтправки;
//	
//КонецФункции

#КонецОбласти

#КонецОбласти