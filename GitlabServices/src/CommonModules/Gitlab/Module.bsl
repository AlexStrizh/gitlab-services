#Область ПрограммныйИнтерфейс

// Возвращает параметры соединения к серверу Gitlab по адресу и пользовательским настройкам подключения.
// 
// Параметры:
// 	Адрес - Строка - адрес к серверу Gitlab, например, "http://www.example.org";
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Адрес - Строка - адрес к серверу GitLab;
// * Token - Строка - token доступа к серверу GitLab из текущих настроек сервисов;
// * Таймаут - Число - таймаут подключения к Gitlab из текущих настроек сервисов;
//
Функция ПараметрыСоединения( Знач Адрес ) Экспорт
	
	Перем ТекущиеНастройки;
	Перем Результат;
	
	ТекущиеНастройки = НастройкаСервисов.ТекущиеНастройки();
	
	Результат = Новый Структура();
	Результат.Вставить( "Адрес", Адрес );
	Результат.Вставить( "Token", ТекущиеНастройки.GitLabUserPrivateToken );
	Результат.Вставить( "Таймаут", ТекущиеНастройки.ТаймаутGitLab );
	
	Возврат Результат;
	
КонецФункции

// Получает с сервера GitLab файл и формирует его описание.
// 
// Параметры:
// 	ПараметрыСоединения - (См. Gitlab.ПараметрыСоединения)
// 	ПутьКФайлу - Строка - относительный путь к получаемому файлу, например,
// 							"/api/v4/projects/1/repository/files/D0%BA%D0%B0%201.epf/raw?ref=ef3529e5486ff";
// 	
// Возвращаемое значение:
// 	Структура - описание:
// * ИмяФайла - Строка - имя файла, перекодированное из windows-1251;
// * ИмяФайлаИзЗапроса - Строка - имя файла в исходном формате;
// * Данные - ДвоичныеДанные - данные файла;
// * Ошибка - Строка - текст с описанием ошибки получения файла с сервера;
// 
Функция ПолучитьФайл( Знач ПараметрыСоединения, Знач ПутьКФайлу ) Экспорт

	Перем Адрес;
	Перем Заголовки;
	Перем ДополнительныеПараметры;
	Перем ИмяФайлаWin1251;
	Перем ИмяФайлаUTF8;
	Перем Ответ;
	Перем Результат;
	
	Адрес = ПараметрыСоединения.Адрес + ПутьКФайлу;
	Результат = ОписаниеФайла();

	Попытка

		Заголовки = Новый Соответствие();
		Заголовки.Вставить( "PRIVATE-TOKEN", ПараметрыСоединения.Token );
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить( "Заголовки", Заголовки );
		ДополнительныеПараметры.Вставить( "Таймаут", ПараметрыСоединения.Таймаут );
		
		Ответ = КоннекторHTTP.Get( Адрес, Неопределено, ДополнительныеПараметры );

		Если ( НЕ КодыСостоянияHTTPКлиентСерверПовтИсп.isOk(Ответ.КодСостояния) ) Тогда
			
			ВызватьИсключение КодыСостоянияHTTPКлиентСерверПовтИсп.НайтиИдентификаторПоКоду( Ответ.КодСостояния );
		
		КонецЕсли;
		
		ИмяФайлаWin1251 = Ответ.Заголовки.Получить( "X-Gitlab-File-Name" );
		
		Если ( ИмяФайлаWin1251 = Неопределено ) Тогда
			
			ВызватьИсключение НСтр("ru = 'Файл не найден.'");
			
		КонецЕсли;
		
		ИмяФайлаUTF8 = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку( ИмяФайлаWin1251, "windows-1251" );
		
		Результат.ПутьКФайлуRAW = ПутьКФайлу;
		Результат.ИмяФайлаWin1251 = ИмяФайлаWin1251;
		Результат.ИмяФайлаUTF8 = ИмяФайлаUTF8;
		Результат.ДвоичныеДанные = Ответ.Тело;
		
	Исключение
	
		Результат.ОписаниеОшибки = СтрШаблон( НСтр("ru = 'Ошибка получения файла: %1'"),
										Адрес + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает с сервера GitLab файлы и формирует их описание.
// 
// Параметры:
// 	ПараметрыСоединения - (См. Gitlab.ПараметрыСоединения)
// 	ПутиКФайлам - Массив из Строка - массив относительных путей к получаемым файлам, например,
// 							"/api/v4/projects/1/repository/files/D0%BA%D0%B0%201.epf/raw?ref=ef3529e5486ff";
// 	
// Возвращаемое значение:
// 	Массив из Структура:
// * ИмяФайла - Строка - имя файла, перекодированное из windows-1251;
// * ИмяФайлаИзЗапроса - Строка - имя файла в исходном формате;
// * Данные - ДвоичныеДанные - данные файла;
// * Ошибка - Строка - текст с описанием ошибки получения файла с сервера;
// 
Функция ПолучитьФайлы( Знач ПараметрыСоединения, Знач ПутиКФайлам ) Экспорт
	
	Перем Результат;

	Результат = Новый Массив;
	
	Для Каждого ПутьКФайлу Из ПутиКФайлам Цикл
		
		Результат.Добавить( ПолучитьФайл(ПараметрыСоединения, ПутьКФайлу) );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает перекодированный в URL относительный путь к файлу в RAW формате. 
// 
// Параметры:
// 	ProjectId - Строка - id проекта;
// 	ПутьКФайлу - Строка - относительный путь к файлу в репозитории (вместе с именем файла);
// 	Commit - Строка - сommit SHA;
// 
// Возвращаемое значение:
// 	Строка - перекодированный в URL относительный путь к файлу.
//
Функция ПутьКФайлуRAW( Знач ProjectId, Знач ПутьКФайлу, Знач Commit ) Экспорт
	
	Перем Шаблон;
	
	Шаблон = "/api/v4/projects/%1/repository/files/%2/raw?ref=%3";
	ПутьКФайлу = КодироватьСтроку( ПутьКФайлу, СпособКодированияСтроки.КодировкаURL );
	
	Возврат СтрШаблон(Шаблон, ProjectId, ПутьКФайлу, Commit);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеФайла()

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "ПутьКФайлуRAW" );
	Результат.Вставить( "ИмяФайлаUTF8" );
	Результат.Вставить( "ИмяФайлаWin1251" );
	Результат.Вставить( "ДвоичныеДанные" );
	Результат.Вставить( "ОписаниеОшибки" );
	
	Возврат Результат;

КонецФункции

#КонецОбласти