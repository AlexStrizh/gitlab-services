#Область ПрограммныйИнтерфейс





//// Получает двоичные данные с сервера GitLab и помещает их в таблицу с описанием этих файлов.
//// 
//// Параметры:
////	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
////	ПараметрыПроекта - (См. ПараметрыПроектаИзТелаЗапроса);
//// 	ИзмененияВРепозитории - (См. ВсеДействияНадДвоичнымиФайламиВнешнегоХранилища);
//// 	Коммит - идентификатор коммита;
//// 	PrivateTokenGitLab - (См. PrivateTokenGitLab);
////	Таймаут - (См. ТаймаутGitLab);
//// Возвращаемое значение:
////  (См. НайтиИзмененныеФайлы)
//Функция ПолучитьДанныеДляОтправкиССервераGitLab(Знач ИдентификаторWebhook,
//												Знач ПараметрыПроекта,
//												Знач ИзмененияВРепозитории,
//												Знач Коммит,
//												Знач PrivateTokenGitLab,
//												Знач Таймаут = 0)
//                                                
//	Перем СтруктураURI;
//	Перем HTTPОтвет;
//	Перем ИмяФайла;
//	Перем ДвоичныеДанные;
//	Перем ТекстСообщения;
//	
//	ДанныеДляОтправки = НайтиИзмененныеФайлы(ИзмененияВРепозитории, Коммит);
//	СтруктураURI      = ПараметрыПроекта.СтруктураURI;
//	
//	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
//	ДополнительныеПараметры.Объект = ИдентификаторWebhook;	
//
//	Для каждого ОписаниеФайла Из ДанныеДляОтправки Цикл
//		
//		HTTPОтвет = СервисыGitLab.ВыполнитьHTTPЗапросНаПолучениеФайла(ИдентификаторWebhook,
//																	  СтруктураURI,
//																	  ОписаниеФайла.ПутьКФайлу,
//																	  PrivateTokenGitLab,
//																	  Таймаут);
//																	  
//		ДополнительныеПараметры.HTTPОтвет = HTTPОтвет;
//		
//		ИмяФайла       = "";
//		ДвоичныеДанные = Неопределено;
//		
//		Если HTTPОтвет.КодСостояния = 200 Тогда
//			
//			ИмяФайла = HTTPОтвет.Заголовки.Получить("X-Gitlab-File-Name");
//			ОписаниеФайла.ИмяФайла = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку(ИмяФайла, "windows-1251");
//			
//			ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
//			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
//			
//			ТекстСообщения = СтрШаблон(НСтр("ru = '%1: с сервера GitLab получен файл %2.'"),
//				Коммит,	ОписаниеФайла.ПолноеИмяФайла);
//				
//			Логирование.Информация( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//			
//		Иначе
//			
//			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка получения двоичных данных с сервера GitLab: %1%2'"),
//				СтруктураURI.ИмяСервера, ОписаниеФайла.ПутьКФайлу);
//				
//			Логирование.Ошибка( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ДанныеДляОтправки;
//	
//КонецФункции
//
//
//
////TODO smelt во входящих, сократить количество
//// Выполняет HTTPЗапрос по методу "GET" к серверу для получения файла. 
//// 
//// Параметры:
////	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//// 	СтруктураURI - Структура - параметры файла:
//// 	* Схема         - Строка - схема из URI.
////  * Логин         - Строка - логин из URI.
////  * Пароль        - Строка - пароль из URI.
////  * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
////  * Хост          - Строка - хост из URI.
////  * Порт          - Строка - порт из URI.
////  * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
////	ПутьКФайлу 	 - Строка - относительный путь к файлу
////		в формате "/api/v4/projects/%1/repository/files/%2/raw?ref=%3"
//// 	PrivateTokenGitLab - (См. PrivateTokenGitLab)
//// 	Таймаут - Число - таймаут осуществляемого соединения и операций, в секундах. 0 - не устанавливать таймаут.
//// Возвращаемое значение:
//// 	HTTPОтвет - HTTPОтвет - HTTP-ответ сервера на запрос получения файла.
//Функция ВыполнитьHTTPЗапросНаПолучениеФайла(Знач ИдентификаторWebhook,
//												Знач СтруктураURI,
//												Знач ПутьКФайлу,
//												Знач PrivateTokenGitLab,
//												Знач Таймаут = 0) Экспорт
//	
//	Перем Соединение;
//	Перем HTTPЗапрос;
//	Перем HTTPОтвет;
//	
//	Соединение = Новый HTTPСоединение(СтруктураURI.ИмяСервера, , , , , Таймаут);
//	
//	//TODO mock
//	//Соединение = Новый HTTPСоединение("8879f2e6-33c1-48ba-9bfa-93c75847bd7c.mock.pstmn.io", , , , , Таймаут);
//	//TODO mock
//	
//	HTTPЗапрос = Новый HTTPЗапрос;
//	HTTPЗапрос.АдресРесурса = ПутьКФайлу;
//	HTTPЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", PrivateTokenGitLab);
//	
//	Попытка
//		HTTPОтвет = Соединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
//	Исключение
//		
//		ДополнительныеПараметры = Логирование.ДополнительныеДанные();
//		ДополнительныеПараметры.Объект = ИдентификаторWebhook;
//		ТекстСообщения = НСтр("ru = 'Ошибка при вызове метода GET: %1%2'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, СтруктураURI.ИмяСервера, ПутьКФайлу);
//		Логирование.Ошибка( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//	    //ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат HTTPОтвет;
//	
//КонецФункции






// TODO перепроверить описание процедуры

// Возвращает полученный с сервера файл с его описанием.
// 
// Параметры:
// 	URL - Строка - адрес сервера, например, "http://www.gitlab.com";
// 	ПутьКФайлу - Строка - относительный путь к файлу в RAW формате, например,
// 							"/api/v4/projects/1/repository/files/D0%BA%D0%B0%201.epf/raw?ref=ef3529e5486ff";
// 	PrivateTokenGitLab - (См. PrivateTokenGitLab)
// 	Таймаут - (См. ТаймаутGitLab)
// 	
// Возвращаемое значение:
// 	Структура - описание:
// * ИмяФайла - Строка - имя файла, перекодированное из windows-1251;
// * ИмяФайлаИзЗапроса - Строка - имя файла в исходном формате;
// * Данные - ДвоичныеДанные - данные файла;
// * Ошибка - Строка - текст с описанием ошибки получения файла с сервера;
// 
Функция ПолучитьФайл( Знач URL, Знач ПутьКФайлу, Знач PrivateTokenGitLab, Знач Таймаут ) Экспорт

	Перем Адрес;
	Перем Заголовки;
	Перем ДополнительныеПараметры;
	Перем ИмяФайла;
	Перем ИмяФайлаИзЗапроса;
	Перем Ответ;
	Перем Результат;
	
	Адрес = URL + ПутьКФайлу;
	Результат = ОписаниеФайла();

	Попытка

		Заголовки = Новый Соответствие();
		Заголовки.Вставить( "PRIVATE-TOKEN", PrivateTokenGitLab );
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить( "Заголовки", Заголовки );
		ДополнительныеПараметры.Вставить( "Таймаут", Таймаут );
		
		Ответ = КоннекторHTTP.Get( Адрес, Неопределено, ДополнительныеПараметры );

		Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
			
			ВызватьИсключение "";
		
		КонецЕсли;
		
		ИмяФайлаИзЗапроса = Ответ.Заголовки.Получить( "X-Gitlab-File-Name" );
		
		Если ( ИмяФайлаИзЗапроса = Неопределено ) Тогда
			
			ВызватьИсключение НСтр("ru = 'Файл не найден.'");
			
		КонецЕсли;
		
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку( ИмяФайлаИзЗапроса, "windows-1251" );
		
		Результат.ИмяФайлаИзЗапроса = ИмяФайлаИзЗапроса;
		Результат.ИмяФайла = ИмяФайла; // windows-1251, иначе будет ошибка веб-сервера 1с
		Результат.Данные = Ответ.Тело;
		
	Исключение
	
		Результат.Ошибка = СтрШаблон( НСтр("ru = 'Ошибка получения файла: %1'"),
										Адрес + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает перекодированный в URL относительный путь к файлу в RAW формате. 
// 
// Параметры:
// 	ProjectId - Строка - id проекта;
// 	Commit - Строка - сommit SHA;
// 	ПутьКФайлу - Строка - относительный путь к файлу в репозитории вместе с именем файла;
// 	
// Возвращаемое значение:
// 	Строка - перекодированный в URL относительный путь к файлу.
//
Функция ПутьКФайлуRAW( Знач ProjectId, Знач Commit, Знач ПутьКФайлу )
	
	Перем Шаблон;
	
	Шаблон = "/api/v4/projects/%1/repository/files/%2/raw?ref=%3";
	ПутьКФайлу = КодироватьСтроку( ПутьКФайлу, СпособКодированияСтроки.КодировкаURL );
	
	Возврат СтрШаблон(Шаблон, ProjectId, ПутьКФайлу, Commit);
	
КонецФункции

Функция ОписаниеФайла()

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "ИмяФайла" );
	Результат.Вставить( "ИмяФайлаИзЗапроса" );
	Результат.Вставить( "Данные" );
	Результат.Вставить( "Ошибка" );
	
	Возврат Результат;

КонецФункции

#КонецОбласти