#Область ПрограммныйИнтерфейс


// Передает имя и тело файла (двоичные данные) в ИБ-приемник через его веб-сервис. Адрес подключения берется из параметра доставки.
// 
// Параметры:
// 	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//	КлючЗапросаGitLab - Строка - значение checkout_sha коммита;
// 	ИмяФайла - Строка - имя файла, по которому производится поиск и замена внешних отчетов/обработок.
// 	ДвоичныеДанные - ДвоичныеДанные - тело файла в виде ДвоичныеДанные.
// 	ПараметрыДоставки - (См. ИнициализироватьПараметрыДоставки)
Процедура ПередатьДвоичныеДанныеВИБПриемник(Знач ИдентификаторWebhook,
												Знач КлючЗапросаGitLab,
												Знач ИмяФайла,
												Знач ДвоичныеДанные,
												Знач ПараметрыДоставки) Экспорт
	
	//Перем URIПространстваИменСервиса;
//	Перем ИмяСервиса;
//	Перем ИмяПорта;
	
//	Перем Результат;

	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ИдентификаторWebhook;	

	ПередатьДвоичныеДанныеВИБПриемникПроверкаВходящихПараметров(ИмяФайла, ДвоичныеДанные, ПараметрыДоставки);
	
	
	//TODO mock
	//Генератор = Новый ГенераторСлучайныхЧисел;
	//Результат = Булево(Генератор.СлучайноеЧисло(0, 1));
	//TODO mock
	
//	Результат = Ложь;
//	Попытка
//		//URIПространстваИменСервиса = "http://epf.stdp.ru";
//		ИмяСервиса = "EpfService";
//		ИмяПорта   = "EpfServiceSoap";
//		Прокси     = WSСсылки.EpfService.СоздатьWSПрокси(URIПространстваИменСервиса, ИмяСервиса,
//													 ИмяПорта, , ПараметрыДоставки.Таймаут, , ПараметрыДоставки.МестоположениеСервиса);
//		Прокси.Пользователь = ПараметрыДоставки.Пользователь;
//		Прокси.Пароль       = ПараметрыДоставки.Пароль;
//		
//		Результат = Прокси.ModifyObject(ИмяФайла, ДвоичныеДанные);
		
		
		//Соединение = Новый HTTPСоединение("localhost", , , , , ПараметрыДоставки.Таймаут);
		//HTTPЗапрос = Новый HTTPЗапрос;
		//HTTPЗапрос.АдресРесурса = "/target/hs/gitlab/update";
		//HTTPЗапрос.Заголовки.Вставить("Token", ПараметрыДоставки.ApiKey);
		
Заголовки = Новый Соответствие;
//Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
Заголовки.Вставить("Name", "test");		
		

		
		
	Попытка
		//HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
		Ответ = КоннекторHTTP.Post(
    "http://localhost/receiver/hs/gitlab/update",
    ДвоичныеДанные, 
    Новый Структура("Заголовки,Таймаут", Заголовки, ПараметрыДоставки.Таймаут));		
		
		
	Исключение
		ТекстСообщения = НСтр("ru = '%1: Файл: %2; Адрес доставки: %3; %4'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
										КлючЗапросаGitLab,
										ИмяФайла,
										ПараметрыДоставки.МестоположениеСервиса,
										ИнформацияОбОшибке().Описание);
										
		Логирование.Ошибка( "Core.ПередачаФайлаВИБПриемник", ТекстСообщения, ДополнительныеПараметры );
		
		// Исключений не пробрасываем, так как процедура в асинхронном режиме должна выполниться.
		Возврат;
	КонецПопытки;
	
	//Возврат HTTPОтвет;
		
		
	
//	
//	ТекстСообщения = НСтр("ru = '%1: Доставлено: %2; Файл: %3; Адрес доставки: %4'");
//	ТекстСообщения = СтрШаблон(ТекстСообщения,
//									КлючЗапросаGitLab,
//									Строка(Результат),
//									ИмяФайла,
//									ПараметрыДоставки.МестоположениеСервиса);
//									
//	Логирование.Информация("Core",
//										 "ПередачаФайлаВИБПриемник",
//										 ИдентификаторWebhook,
//										 ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередатьДвоичныеДанныеВИБПриемникПроверкаВходящихПараметров(Знач ИмяФайла,
																		Знач ДвоичныеДанные,
																		Знач ПараметрыДоставки)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисыGitLab.ПередатьДвоичныеДанныеВИБПриемник",
		"ИмяФайла",
		ИмяФайла,
		Тип("Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисыGitLab.ПередатьДвоичныеДанныеВИБПриемник",
		"ДвоичныеДанные",
		ДвоичныеДанные,
		Тип("ДвоичныеДанные"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисыGitLab.ПередатьДвоичныеДанныеВИБПриемник",
		"ПараметрыДоставки",
		ПараметрыДоставки,
		Тип("Структура"),
		Новый Структура("ТочкаДоставки, ApiKey", Тип("Строка"), Тип("Строка")));
	
КонецПроцедуры

#КонецОбласти