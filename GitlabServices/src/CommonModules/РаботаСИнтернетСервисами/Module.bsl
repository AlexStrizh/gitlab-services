#Область ПрограммныйИнтерфейс

// Формирование краткого описания сервиса по метаданным конфигурации в виде коллекции (см. API REST сервиса).
// 
// Параметры:
// 	ИмяСервиса - Строка - имя сервиса в конфигурации;
// Возвращаемое значение:
// 	Структура - коллекция с описанием сервиса:
//	* name - Строка - имя сервиса;
//	* desc - Строка - комментарий к сервису;
// 	* enabled - Булево - Истина - функциональность включена, иначе - Ложь;
// 	* templates - Массив из Структура - шаблоны URL:
//		** name - Строка - имя шаблона URL;
//		** desc - Строка - комментарий к шаблону URL;
//		** template - Строка - шаблон;
//		** methods - Массив из Структура - методы:
//			*** name - Строка - имя метода сервиса;
//			*** desc - Строка - комментарий к методу сервиса;
//			*** method - Строка - HTTP-метод сервиса;
//			
// @UnitTest
//
Функция ОписаниеСервиса( Знач ИмяСервиса ) Экспорт
	
	Перем МетаданныеСервис;
	
	МетаданныеСервис = Метаданные.HTTPСервисы.Найти( ИмяСервиса );
	
	Если (МетаданныеСервис = Неопределено) Тогда
		
		Возврат Новый Структура();
		
	КонецЕсли;
	
	Возврат ПолучитьКоллекциюСОписаниемСервиса( ИмяСервиса, МетаданныеСервис );
	
КонецФункции

// Получение описания веб-сервиса по адресу URL c десериализацией.
// 
// Параметры:
// 	URL - Строка - URL веб-сервиса; 
// Возвращаемое значение:
// 	- Неопределено - если сервис не найден, иначе возвращает коллекцию с ответом и телом ответа в различных форматах;
// 	- ФиксированнаяСтруктура - описание:
//	* Ответ - Структура - (См. КоннекторHTTP.Get)
//	* Соответствие - Соответствие - (См. КоннекторHTTP.КакJson)
// 	* json - Строка - (См. КоннекторHTTP.КакТекст)
//			
// @UnitTest
//
Функция ОписаниеСервисаURL( Знач URL ) Экспорт
	
	Перем Ответ;
	Перем Результат;

	Результат = Неопределено;
	
	Если ( ТипЗнч(URL) <> Тип("Строка") ИЛИ ПустаяСтрока(URL) ) Тогда
		
		Возврат Результат;
		 					
	КонецЕсли;
	
	Ответ = КоннекторHTTP.Get( URL );
			
	Если ( ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Ответ.Тело) ) Тогда
		
		Результат = Новый Структура();
		Результат.Вставить( "Ответ", Ответ );
		Результат.Вставить( "Соответствие", КоннекторHTTP.КакJson(Ответ) );
		Результат.Вставить( "json", КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8) );
		
		Результат = Новый ФиксированнаяСтруктура( Результат );
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает структура ответа по описанию схемы ответа REST сервиса (см. API REST сервиса)
// 
// Возвращаемое значение:
// 	Структура - описание:
// * Тип - Строка - тип ответа, "info" или "error";
// * Сообщение - Строка - текст сообщения;
//
// @UnitTest
//
Функция СтруктураОтвета() Экспорт

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "type" );
	Результат.Вставить( "message" );
	
	Возврат Результат;

КонецФункции








// TODO нэйминг! 

// Получает тело HTTP-ответа в формате JSON и преобразует его в коллекцию. Если ДобавлятьИсточник=Истина,
// то дополнительно в коллекцию по ключу "json" добавляется элемент с текстом тела HTTP-ответа в формате JSON. 
// 
// Параметры:
// 	HTTPОтвет - HTTPОтвет - HTTP-ответ;
//	ЭтоСоответствие - Булево - если Истина, то JSON будет преобразован в Соответствие, если Ложь, то в Структуру;
// 	ДобавлятьИсточник - Булево - если Истина, то в коллекцию по ключу "json" добавляется элемент
// 		с текстом в формате JSON;
// 	Коллекция - Неопределено, Соответствие, Структура - (исходящий параметр),
//		тело запроса преобразованное из текста в формате JSON в Соответствие или Структуру;
//			
// @tested
Процедура ТелоHTTPОтветаВКоллекциюКакJSON(Знач HTTPОтвет, Знач ЭтоСоответствие = Ложь, Знач ДобавлятьИсточник = Ложь,
				Коллекция = Неопределено) Экспорт
	
	Перем Поток;
	
	Поток = HTTPОтвет.ПолучитьТелоКакПоток();

	Попытка
		
		ОбщегоНазначения.ПотокВКоллекциюКакJSON( Поток, ЭтоСоответствие, ДобавлятьИсточник, Коллекция );
		
	Исключение

		Поток.Закрыть();
		ВызватьИсключение;
	
	КонецПопытки;
	
	Поток.Закрыть();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКоллекциюСОписаниемСервиса( Знач ИмяСервиса, Знач МетаданныеСервиса )

	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "name", ИмяСервиса );
	Результат.Вставить( "desc", МетаданныеСервиса.Комментарий );
	Результат.Вставить( "enabled", ПолучитьФункциональнуюОпцию( "ОбрабатыватьЗапросыВнешнегоХранилища" ) );
	
	Результат.Вставить( "templates", ПолучитьОписаниеШаблоновСервиса( МетаданныеСервиса.ШаблоныURL ) );
	
	Возврат Результат;

КонецФункции

Функция ПолучитьОписаниеМетодовСервиса( Знач Методы )
	
	Перем НовыйОписаниеМетода;
	Перем Результат;
	
	Результат = Новый Массив();
	
	Для каждого Метод Из Методы Цикл
		
		НовыйОписаниеМетода = Новый Структура();
		НовыйОписаниеМетода.Вставить( "name", Метод.Имя );
		НовыйОписаниеМетода.Вставить( "desc", Метод.Комментарий );
		НовыйОписаниеМетода.Вставить( "method", Строка(Метод.HTTPМетод) );
		
		Результат.Добавить( НовыйОписаниеМетода );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьОписаниеШаблоновСервиса( Знач Шаблоны )
	
	Перем НовыйОписаниеШаблона;
	Перем Результат;

	Результат = Новый Массив();
	
	Для каждого Шаблон Из Шаблоны Цикл
		
		НовыйОписаниеШаблона = Новый Структура();
		НовыйОписаниеШаблона.Вставить( "name", Шаблон.Имя );
		НовыйОписаниеШаблона.Вставить( "desc", Шаблон.Комментарий );
		НовыйОписаниеШаблона.Вставить( "template", Шаблон.Шаблон );

		НовыйОписаниеШаблона.Вставить( "methods", ПолучитьОписаниеМетодовСервиса( Шаблон.Методы ) );
		Результат.Добавить( НовыйОписаниеШаблона );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти