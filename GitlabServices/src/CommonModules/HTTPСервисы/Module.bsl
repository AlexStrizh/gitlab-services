#Область ПрограммныйИнтерфейс

// Формирование краткого описания сервиса по метаданным конфигурации в виде коллекции (см. API REST сервиса).
// 
// Параметры:
// 	ИмяСервиса - Строка - имя сервиса в конфигурации;
// Возвращаемое значение:
// 	- Неопределено - если сервис не найден;
// 	- Структура - коллекция с описанием сервиса:
//		* name - Строка - имя сервиса;
//		* desc - Строка - комментарий к сервису;
// 		* enabled - Булево - Истина - функциональность включена, иначе - Ложь;
// 		* templates - Массив из Структура - шаблоны URL:
//			** name - Строка - имя шаблона URL;
//			** desc - Строка - комментарий к шаблону URL;
//			** template - Строка - шаблон;
//			** methods - Массив из Структура - методы:
//				*** name - Строка - имя метода сервиса;
//				*** desc - Строка - комментарий к методу сервиса;
//				*** method - Строка - HTTP-метод сервиса;
//			
Функция ОписаниеСервиса( Знач ИмяСервиса ) Экспорт
	
	Var МетаданныеСервис;
	
	МетаданныеСервис = Метаданные.HTTPСервисы.Найти( ИмяСервиса );
	
	Если (МетаданныеСервис = Неопределено) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат КоллекцияОписаниеСервиса( ИмяСервиса, МетаданныеСервис );
	
КонецФункции

// Получение описания веб-сервиса по адресу URL c десериализацией.
// 
// Параметры:
// 	URL - Строка - URL веб-сервиса; 
// Возвращаемое значение:
// 	- Неопределено - если сервис не найден или описание сервиса не в формате json;
// 	- ФиксированнаяСтруктура - тело ответа и результаты преобразования его в различные форматы:
//		* Ответ - Структура - (См. HTTPConnector.Get)
//		* Данные - Соответствие - (См. HTTPConnector.КакJson)
// 		* json - Строка - (См. HTTPConnector.КакТекст)
//			
Функция ОписаниеСервисаURL( Знач URL ) Экспорт
	
	Var HTTPStatusCodes;
	Var Ответ;
	Var Результат;

	Результат = Неопределено;
	
	Если ( ТипЗнч(URL) <> Тип("Строка") ИЛИ ПустаяСтрока(URL) ) Тогда
		
		Возврат Результат;
		 					
	КонецЕсли;
	
	Ответ = HTTPConnector.Get( URL );
	
	HTTPStatusCodes = HTTPStatusCodesClientServerCached;
			
	Если ( ЗначениеЗаполнено(Ответ) И HTTPStatusCodes.isOk(Ответ.КодСостояния) И ЗначениеЗаполнено(Ответ.Тело) ) Тогда
	
		Попытка
			
			Результат = Новый Структура();
			Результат.Вставить( "Ответ", Ответ );
			Результат.Вставить( "Данные", HTTPConnector.КакJson(Ответ) );
			Результат.Вставить( "json", HTTPConnector.КакТекст(Ответ, КодировкаТекста.UTF8) );
			
		Исключение
			
			Возврат Неопределено;
			
		КонецПопытки;
		
		Результат = Новый ФиксированнаяСтруктура( Результат );
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает структура ответа по описанию схемы ответа REST сервиса (см. API REST сервиса)
// 
// Возвращаемое значение:
// 	Структура - описание:
// * Тип - Строка - тип ответа, "info" или "error";
// * Сообщение - Строка - текст сообщения;
//
Функция СтруктураОтвета() Экспорт

	Var Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "type" );
	Результат.Вставить( "message" );
	
	Возврат Результат;

КонецФункции

#EndRegion

#Region Private

Функция КоллекцияОписаниеСервиса( Знач ИмяСервиса, Знач МетаданныеСервиса )

	Var Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "name", ИмяСервиса );
	Результат.Вставить( "desc", МетаданныеСервиса.Комментарий );
	Результат.Вставить( "enabled", ПолучитьФункциональнуюОпцию( "ОбрабатыватьЗапросыВнешнегоХранилища" ) );
	
	Результат.Вставить( "templates", ОписаниеШаблоновСервиса( МетаданныеСервиса.ШаблоныURL ) );
	
	Возврат Результат;

КонецФункции

Функция ОписаниеМетодовСервиса( Знач Методы )
	
	Var НовыйОписаниеМетода;
	Var Результат;
	
	Результат = Новый Массив();
	
	Для каждого Метод Из Методы Цикл
		
		НовыйОписаниеМетода = Новый Структура();
		НовыйОписаниеМетода.Вставить( "name", Метод.Имя );
		НовыйОписаниеМетода.Вставить( "desc", Метод.Комментарий );
		НовыйОписаниеМетода.Вставить( "method", Строка(Метод.HTTPМетод) );
		
		Результат.Добавить( НовыйОписаниеМетода );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ОписаниеШаблоновСервиса( Знач Шаблоны )
	
	Var НовыйОписаниеШаблона;
	Var Результат;

	Результат = Новый Массив();
	
	Для каждого Шаблон Из Шаблоны Цикл
		
		НовыйОписаниеШаблона = Новый Структура();
		НовыйОписаниеШаблона.Вставить( "name", Шаблон.Имя );
		НовыйОписаниеШаблона.Вставить( "desc", Шаблон.Комментарий );
		НовыйОписаниеШаблона.Вставить( "template", Шаблон.Шаблон );

		НовыйОписаниеШаблона.Вставить( "methods", ОписаниеМетодовСервиса( Шаблон.Методы ) );
		Результат.Добавить( НовыйОписаниеШаблона );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#EndRegion