#Область ПрограммныйИнтерфейс

Функция РаспределитьОтправляемыеДанныеПоМаршрутам( Знач ОтправляемыеДанные, Знач ДанныеЗапроса ) Экспорт
	
	Перем Результат;
	
	// Cформировать адреса доставки для каждого файла в коммите
	МаршрутыОтправкиФайлов = МаршрутыОтправкиФайловПоДаннымЗапроса( ДанныеЗапроса );
	
	
	
	// Заполнить структуру данных к отправке
	
	Результат = МаршрутыОтправкиФайлов;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция МаршрутыОтправкиФайловПоДаннымЗапроса( ДанныеЗапроса ) Экспорт
	
	Перем Результат;
	
	Результат = Новый Соответствие();
	
	Commits = ДанныеЗапроса.Получить( "commits" );
	
	Для каждого Commit Из Commits Цикл
		
		НастройкиМаршрутизации = Commit.Получить( "user_settings" );
		
		Если ( НастройкиМаршрутизации = Неопределено ) Тогда
			
			НастройкиМаршрутизации = Commit.Получить( "settings" );
			
		КонецЕсли;
		
		Если ( НастройкиМаршрутизации = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Идентификатор = Commit.Получить( "id" );
		АдресаДоставкиФайлов = АдресаДоставкиФайлов( НастройкиМаршрутизации );		
		Результат.Вставить( Идентификатор, АдресаДоставкиФайлов );

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция АдресаДоставкиФайлов( Знач НастройкиМаршрутизации )
	
	Результат = Новый Соответствие();
		
	СервисыДоставки = ДоступныеСервисыДоставки( НастройкиМаршрутизации );
	НастройкиДоставкиФайлов = НастройкиМаршрутизации.Получить("epf");
	
	Для каждого НастройкаДоставкиФайла Из НастройкиДоставкиФайлов Цикл
		
		ПолноеИмяФайла = НастройкаДоставкиФайла.Получить("name");
		
		Если ПолноеИмяФайла = Неопределено ИЛИ ПустаяСтрока(ПолноеИмяФайла) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Исключения = НастройкаДоставкиФайла.Получить("exclude");
		
		Адреса = Новый Массив();
		
		Если Исключения = Неопределено Тогда
			
			Для Каждого Элемент Из СервисыДоставки Цикл
				
				Адреса.Добавить(Элемент.Значение);
				
			КонецЦикла;
			
		Иначе
			
				Для Каждого Элемент Из СервисыДоставки Цикл
					
					Если Исключения.Найти(Элемент.Ключ) = Неопределено Тогда
				
						Адреса.Добавить(Элемент.Значение);
						
					КонецЕсли;
				
			КонецЦикла;		
			
		КонецЕсли;

		Результат.Вставить(ПолноеИмяФайла, Адреса);
		
	КонецЦикла;
	

	
	Возврат Результат;
	
КонецФункции

// По данным настроек маршрутизации подготавливает список доступных сервисов.
// 
// Параметры:
// 	Настройки - Соответствие - настройки маршрутизации для конкретного коммита.  
// Возвращаемое значение:
// 	Соответствие - доступные сервисы доставки:
//	* Ключ - Строка - имя сервиса
//	* Значение - Строка - адрес сервиса
//
Функция ДоступныеСервисыДоставки(Знач Настройки)
	
	Перем Результат;
	Перем ВсеСервисыДоставки;
	Перем ИмяСервиса;
	Перем СервисВключен;
	Перем АдресСервиса;
	
	Результат          = Новый Соответствие;
	ВсеСервисыДоставки = Неопределено;
	
	ВсеСервисыДоставки = Настройки.Получить("ws");
	
	Если ВсеСервисыДоставки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого СервисДоставки Из ВсеСервисыДоставки Цикл
		
		ИмяСервиса = СервисДоставки.Получить("name");
		Если ИмяСервиса = Неопределено ИЛИ ПустаяСтрока(ИмяСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		СервисВключен = СервисДоставки.Получить("enabled");
		Если СервисВключен <> Неопределено И СервисВключен Тогда
			
			АдресСервиса = СервисДоставки.Получить("address");
			Если АдресСервиса <> Неопределено И НЕ ПустаяСтрока(АдресСервиса) Тогда
				Результат.Вставить(ИмяСервиса, АдресСервиса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


//
//
//
//
//
//
//
//
//
//
//Функция ОтправляемыйФайл()
//	
//	Перем Результат;
//	
//	Результат = Новый Структура();
//	Результат.Вставить( "АдресаДоставки", Новый Массив() );
//	Результат.Вставить( "ДвоичныеДанные", Неопределено );
//	Результат.Вставить( "ОписаниеОшибки", "" );
//	
//	Возврат Результат;
//	
//КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет описание файлов с настройками маршрутизации в коллекцию файлов для последующего их скачивания. 
// 
// Параметры:
// 	ОписаниеФайлов - ТаблицаЗначений - описание:
// * ПутьКФайлуRAW - Строка -  относительный путь к RAW файлу;
// * ИмяФайла - Строка - имя файла;
// * ПолноеИмяФайла - Строка - относительный путь к файлу в репозитории (вместе с именем файла);
// * ДвоичныеДанные - ДвоичныеДанные - содержимое файла;
// * Операция - Строка - вид операции над файлом: "added", "modified", "removed";
// * Дата - Дата - дата операции над файлом;
// * CommitSHA - Строка - сommit SHA;
// * ОписаниеОшибки - Строка - описание ошибки при работе с файлами;
// 	ДанныеЗапроса - Соответствие - преобразованное в коллекцию тело запроса;
// 	ПараметрыПроекта - Структура - описание:
// * Идентификатор - Строка - числовой идентификатор проекта (репозитория);
// * АдресСервера - Строка - адрес сервера вместе со схемой обращения к серверу;
//
Процедура СформироватьОписаниеФайловМаршрутизации( ОписаниеФайлов, Знач ДанныеЗапроса, Знач ПараметрыПроекта ) Экспорт
	
	Перем ПолноеИмяФайла;
	Перем Commits;
	Перем CommitSHA;
	Перем ПутьКФайлуRAW;
	Перем НоваяСтрока;

	Commits = ДанныеЗапроса.Получить( "commits" );	
	ПолноеИмяФайла = НастройкаСервисов.ТекущиеНастройки().ИмяФайлаНастроекМаршрутизации;
	
	Для каждого Commit Из Commits Цикл

		НоваяСтрока = ОписаниеФайлов.Добавить();
		CommitSHA = Commit.Получить( "id" );
		ПутьКФайлуRAW = Gitlab.ПутьКФайлуRAW( ПараметрыПроекта.Идентификатор, ПолноеИмяФайла, CommitSHA );
		НоваяСтрока.ПутьКФайлуRAW = ПутьКФайлуRAW;
		НоваяСтрока.ПолноеИмяФайла = ПолноеИмяФайла;
		НоваяСтрока.Операция = "";
		НоваяСтрока.Дата = Commit.Получить( "timestamp" );
		НоваяСтрока.CommitSHA = CommitSHA;
	
	КонецЦикла;

КонецПроцедуры

// Добавляет десериализованные из JSON настройки маршрутизации файлов в данные запроса.
// 
// Параметры:
// 	ДанныеЗапроса - Соответствие - преобразованное в коллекцию тело запроса;
// 	ДанныеДляОтправки - ТаблицаЗначений - описание:
// * ПутьКФайлуRAW - Строка -  относительный путь к RAW файлу;
// * ИмяФайла - Строка - имя файла;
// * ПолноеИмяФайла - Строка - относительный путь к файлу в репозитории (вместе с именем файла);
// * ДвоичныеДанные - ДвоичныеДанные - содержимое файла;
// * Операция - Строка - вид операции над файлом: "added", "modified", "removed";
// * Дата - Дата - дата операции над файлом;
// * CommitSHA - Строка - сommit SHA;
// * ОписаниеОшибки - Строка - описание ошибки при работе с файлами;
//
Процедура ДополнитьЗапросНастройкамиМаршрутизации( ДанныеЗапроса, Знач ДанныеДляОтправки ) Экспорт
	
	Перем ПолноеИмяФайла;
	Перем Commits;
	Перем ПараметрыОтбора;
	Перем НайденныеНастройки;
	Перем Settings;

	ПолноеИмяФайла = НастройкаСервисов.ТекущиеНастройки().ИмяФайлаНастроекМаршрутизации;	
	Commits = ДанныеЗапроса.Получить( "commits" );
	
	Для каждого Commit Из Commits Цикл
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить( "CommitSHA", Commit.Получить( "id" ) );
		ПараметрыОтбора.Вставить( "ПолноеИмяФайла", ПолноеИмяФайла );
		ПараметрыОтбора.Вставить( "Операция", "" );
		ПараметрыОтбора.Вставить( "ОписаниеОшибки", "" );
		
		НайденныеНастройки = ДанныеДляОтправки.НайтиСтроки( ПараметрыОтбора );
		
		Если ( НЕ ЗначениеЗаполнено(НайденныеНастройки) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Settings = КоннекторHTTP.JsonВОбъект( НайденныеНастройки[0].ДвоичныеДанные.ОткрытьПотокДляЧтения() );
		
		Commit.Вставить( "settings", Settings );
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти