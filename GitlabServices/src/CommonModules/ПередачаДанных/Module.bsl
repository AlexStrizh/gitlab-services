#Область ПрограммныйИнтерфейс

// Отправка файла в информационную базу получателя.
// На конечных точках (базах получателях) должен быть реализован API обновления внешний отчетов и обработок:
// https://app.swaggerhub.com/apis-docs/astrizhachuk/gitlab-services-receiver/1.0.0
// Адрес подключения определяется из параметра доставки. Если процедура вызывается в фоновом задании, то для
// передачи информации о результате выполнения используется объект СообщениеПользователю().
// 
// Параметры:
// 	Данные - ДвоичныеДанные - тело файла в двоичном формате;
// 	ИмяФайла - Строка - имя файла, по которому производится поиск и замена внешних отчетов и обработок (UTF-8);
// 	ПараметрыДоставки - (См. НастройкиСервиса.ПараметрыПолучателя);
//
Процедура ОтправитьФайл( Знач Данные, Знач ИмяФайла, Знач ПараметрыДоставки ) Экспорт
	
	Перем Заголовки;
	Перем ТекстТелаОтвета;
	Перем Сообщение;
		
	ОтправитьФайлПроверкаВходящихПараметров( Данные, ИмяФайла, ПараметрыДоставки );
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить( "Token", ПараметрыДоставки.Token );
	Заголовки.Вставить( "Name", КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.URLВКодировкеURL) );
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить( "Заголовки", Заголовки );
	ДополнительныеПараметры.Вставить( "Таймаут", ПараметрыДоставки.Таймаут );
	
	Ответ = КоннекторHTTP.Post( ПараметрыДоставки.АдресДоставки, Данные, ДополнительныеПараметры );
	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		 
		ТекстТелаОтвета = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
		
	Иначе
		
		ТекстТелаОтвета = Строка(Ответ.КодСостояния);
		
	КонецЕсли;
	
	// TODO как дойду до фоновоых пересмотреть способ сообщений/логирования? не помню почему так, а не иначе сделано
	Сообщение = Новый СообщениеПользователю();	
	Шаблон = НСтр( "ru = 'Адрес доставки: %1; Файл: %2; Сообщение: %3'" );
	Сообщение.Текст = СтрШаблон( Шаблон, ПараметрыДоставки.АдресДоставки, ИмяФайла, ТекстТелаОтвета );
	Сообщение.Сообщить();								
		
КонецПроцедуры








//// Получает двоичные данные с сервера GitLab и помещает их в таблицу с описанием этих файлов.
//// 
//// Параметры:
////	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
////	ПараметрыПроекта - (См. ПараметрыПроектаИзТелаЗапроса);
//// 	ИзмененияВРепозитории - (См. ВсеДействияНадДвоичнымиФайламиВнешнегоХранилища);
//// 	Коммит - идентификатор коммита;
//// 	PrivateTokenGitLab - (См. PrivateTokenGitLab);
////	Таймаут - (См. ТаймаутGitLab);
//// Возвращаемое значение:
////  (См. НайтиИзмененныеФайлы)
//Функция ПолучитьДанныеДляОтправкиССервераGitLab(Знач ИдентификаторWebhook,
//												Знач ПараметрыПроекта,
//												Знач ИзмененияВРепозитории,
//												Знач Коммит,
//												Знач PrivateTokenGitLab,
//												Знач Таймаут = 0)
//                                                
//	Перем СтруктураURI;
//	Перем HTTPОтвет;
//	Перем ИмяФайла;
//	Перем ДвоичныеДанные;
//	Перем ТекстСообщения;
//	
//	ДанныеДляОтправки = НайтиИзмененныеФайлы(ИзмененияВРепозитории, Коммит);
//	СтруктураURI      = ПараметрыПроекта.СтруктураURI;
//	
//	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
//	ДополнительныеПараметры.Объект = ИдентификаторWebhook;	
//
//	Для каждого ОписаниеФайла Из ДанныеДляОтправки Цикл
//		
//		HTTPОтвет = СервисыGitLab.ВыполнитьHTTPЗапросНаПолучениеФайла(ИдентификаторWebhook,
//																	  СтруктураURI,
//																	  ОписаниеФайла.ПутьКФайлу,
//																	  PrivateTokenGitLab,
//																	  Таймаут);
//																	  
//		ДополнительныеПараметры.HTTPОтвет = HTTPОтвет;
//		
//		ИмяФайла       = "";
//		ДвоичныеДанные = Неопределено;
//		
//		Если HTTPОтвет.КодСостояния = 200 Тогда
//			
//			ИмяФайла = HTTPОтвет.Заголовки.Получить("X-Gitlab-File-Name");
//			ОписаниеФайла.ИмяФайла = СтроковыеФункцииКлиентСервер.ПерекодироватьСтроку(ИмяФайла, "windows-1251");
//			
//			ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
//			ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
//			
//			ТекстСообщения = СтрШаблон(НСтр("ru = '%1: с сервера GitLab получен файл %2.'"),
//				Коммит,	ОписаниеФайла.ПолноеИмяФайла);
//				
//			Логирование.Информация( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//			
//		Иначе
//			
//			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка получения двоичных данных с сервера GitLab: %1%2'"),
//				СтруктураURI.ИмяСервера, ОписаниеФайла.ПутьКФайлу);
//				
//			Логирование.Ошибка( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат ДанныеДляОтправки;
//	
//КонецФункции
//
//
//
////TODO smelt во входящих, сократить количество
//// Выполняет HTTPЗапрос по методу "GET" к серверу для получения файла. 
//// 
//// Параметры:
////	ИдентификаторWebhook - СправочникСсылка.ОбработчикиСобытий - ссылка на описание webhook;
//// 	СтруктураURI - Структура - параметры файла:
//// 	* Схема         - Строка - схема из URI.
////  * Логин         - Строка - логин из URI.
////  * Пароль        - Строка - пароль из URI.
////  * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
////  * Хост          - Строка - хост из URI.
////  * Порт          - Строка - порт из URI.
////  * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
////	ПутьКФайлу 	 - Строка - относительный путь к файлу
////		в формате "/api/v4/projects/%1/repository/files/%2/raw?ref=%3"
//// 	PrivateTokenGitLab - (См. PrivateTokenGitLab)
//// 	Таймаут - Число - таймаут осуществляемого соединения и операций, в секундах. 0 - не устанавливать таймаут.
//// Возвращаемое значение:
//// 	HTTPОтвет - HTTPОтвет - HTTP-ответ сервера на запрос получения файла.
//Функция ВыполнитьHTTPЗапросНаПолучениеФайла(Знач ИдентификаторWebhook,
//												Знач СтруктураURI,
//												Знач ПутьКФайлу,
//												Знач PrivateTokenGitLab,
//												Знач Таймаут = 0) Экспорт
//	
//	Перем Соединение;
//	Перем HTTPЗапрос;
//	Перем HTTPОтвет;
//	
//	Соединение = Новый HTTPСоединение(СтруктураURI.ИмяСервера, , , , , Таймаут);
//	
//	//TODO mock
//	//Соединение = Новый HTTPСоединение("8879f2e6-33c1-48ba-9bfa-93c75847bd7c.mock.pstmn.io", , , , , Таймаут);
//	//TODO mock
//	
//	HTTPЗапрос = Новый HTTPЗапрос;
//	HTTPЗапрос.АдресРесурса = ПутьКФайлу;
//	HTTPЗапрос.Заголовки.Вставить("PRIVATE-TOKEN", PrivateTokenGitLab);
//	
//	Попытка
//		HTTPОтвет = Соединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
//	Исключение
//		
//		ДополнительныеПараметры = Логирование.ДополнительныеДанные();
//		ДополнительныеПараметры.Объект = ИдентификаторWebhook;
//		ТекстСообщения = НСтр("ru = 'Ошибка при вызове метода GET: %1%2'");
//		ТекстСообщения = СтрШаблон(ТекстСообщения, СтруктураURI.ИмяСервера, ПутьКФайлу);
//		Логирование.Ошибка( "Core.ПолучениеДанныхДляОтправкиФайлов", ТекстСообщения, ДополнительныеПараметры );
//	    //ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат HTTPОтвет;
//	
//КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьФайлПроверкаВходящихПараметров( Знач Данные, Знач ИмяФайла, Знач ПараметрыДоставки )
	
	Перем СтруктураПараметров;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(	"ПередачаДанных.ОтправитьФайл",
													"Данные",
													Данные,
													Тип("ДвоичныеДанные") );
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр( "ПередачаДанных.ОтправитьФайл",
													"ИмяФайла",
													ИмяФайла,
													Тип("Строка") );
	
	СтруктураПараметров = Новый Структура( "АдресДоставки, Token", Тип("Строка"), Тип("Строка") );
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр( "ПередачаДанных.ОтправитьФайл",
													"ПараметрыДоставки",
													ПараметрыДоставки,
													Тип("Структура"),
													СтруктураПараметров );

КонецПроцедуры

#КонецОбласти