#Область ПрограммныйИнтерфейс

// TODO переделать на обновление данных, а не доставку

// Параметры доставки данных до веб-сервиса обслуживания внешних отчетов и обработок в информационной базе получателе.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресДоставки - Строка - end-point веб-сервиса обновления внешних отчетов и обработок;
// * Token - Строка - token доступа к сервису получателя;
// * Таймаут - Число - таймаут соединения с сервисом, секунд, если 0 - таймаут не установлен;
//
Функция ПараметрыДоставки() Экспорт
	
	Перем Результат;
	
	Результат = НастройкиСервисов.ПараметрыСервисаПолучателя();
	Результат.Вставить( "АдресДоставки", "localhost/receiver/hs/gitlab" );
	
	Возврат Результат;
	
КонецФункции

// Отправка имени заменямого файла и самих данных в информационную базу получателя.
// На конечных точках (базах получателях) должен быть реализован API обновления внешний отчетов и обработок:
// https://app.swaggerhub.com/apis-docs/astrizhachuk/gitlab-services-receiver/1.0.0
// Адрес подключения определяется из параметра доставки. Если процедура вызывается в фоновом задании, то для
// передачи информации о результате выполнения используется объект СообщениеПользователю().
// 
// Параметры:
// 	ИмяФайла - Строка - имя файла, по которому производится поиск и замена внешних отчетов и обработок (UTF-8);
// 	Данные - ДвоичныеДанные - тело файла в двоичном формате;
// 	ПараметрыДоставки - (См. ПараметрыДоставки);
//
Процедура Отправить( Знач ИмяФайла, Знач Данные, Знач ПараметрыДоставки ) Экспорт
	
	Перем Заголовки;
	Перем ТекстТелаОтвета;
	Перем Сообщение;
		
	ОтправитьФайлПроверкаВходящихПараметров( ИмяФайла, Данные, ПараметрыДоставки );
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить( "Token", ПараметрыДоставки.Token );
	Заголовки.Вставить( "Name", КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.URLВКодировкеURL) );
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить( "Заголовки", Заголовки );
	ДополнительныеПараметры.Вставить( "Таймаут", ПараметрыДоставки.Таймаут );
	
	Ответ = КоннекторHTTP.Post( ПараметрыДоставки.АдресДоставки, Данные, ДополнительныеПараметры );
	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		 
		ТекстТелаОтвета = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
		
	Иначе
		
		ТекстТелаОтвета = Строка(Ответ.КодСостояния);
		
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю();	
	Шаблон = НСтр( "ru = 'Адрес доставки: %1; Файл: %2; Сообщение: %3'" );
	Сообщение.Текст = СтрШаблон( Шаблон, ПараметрыДоставки.АдресДоставки, ИмяФайла, ТекстТелаОтвета );
	Сообщение.Сообщить();								
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьФайлПроверкаВходящихПараметров( Знач ИмяФайла, Знач Данные, Знач ПараметрыДоставки )
	
	Перем СтруктураПараметров;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр( "ПередачаДанных.Отправить",
													"ИмяФайла",
													ИмяФайла,
													Тип("Строка") );
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(	"ПередачаДанных.Отправить",
													"Данные",
													Данные,
													Тип("ДвоичныеДанные") );
	
	СтруктураПараметров = Новый Структура( "АдресДоставки, Token", Тип("Строка"), Тип("Строка") );
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр( "ПередачаДанных.Отправить",
													"ПараметрыДоставки",
													ПараметрыДоставки,
													Тип("Структура"),
													СтруктураПараметров );

КонецПроцедуры

#КонецОбласти