#Область ПрограммныйИнтерфейс

// Поиск обработчика событий по секретному ключу (token).
// 
// Параметры:
// 	Token - Строка - секретный ключ (token);
// 	
// Возвращаемое значение:
// 	СправочникСсылка.ОбработчикиСобытий -  ссылка на элемент справочника  "ОбработчикиСобытий";
// 											если не найден, то - пустая ссылка;
//
Функция НайтиПоСекретномуКлючу( Знач Token ) Экспорт
	
	Возврат Справочники.ОбработчикиСобытий.НайтиПоСекретномуКлючу( Token ); 
	
КонецФункции

// Сохраняет десериализованные данные обрабатываемого запроса.
// 
// Параметры:
// 	ОбработчикСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
//  CommitSHA - Строка - сommit SHA, используемый как уникальный идентификатор запроса;
// 	ДанныеЗапроса - Соответствие - преобразованное в коллекцию тело запроса;
//
Процедура СохранитьДанныеЗапроса( Знач ОбработчикСобытия, Знач CommitSHA, Знач ДанныеЗапроса ) Экспорт
	
	СохранитьДанные( "ДанныеЗапросов", ОбработчикСобытия, CommitSHA, ДанныеЗапроса );

КонецПроцедуры

// Сохраняет внешние файлы с их описанием, полученные с сервера GitLab.
// 
// Параметры:
// 	ОбработчикСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
//  CommitSHA - Строка - сommit SHA, используемый как уникальный идентификатор запроса;
// 	ОписаниеФайлов - ТаблицаЗначений - описание:
// * ПутьКФайлуRAW - Строка -  относительный путь к RAW файлу;
// * ИмяФайла - Строка - имя файла;
// * ПолноеИмяФайла - Строка - относительный путь к файлу в репозитории (вместе с именем файла);
// * ДвоичныеДанные - ДвоичныеДанные - содержимое файла;
// * Операция - Строка - вид операции над файлом: "added", "modified", "removed";
// * Дата - Дата - дата операции над файлом;
// * CommitSHA - Строка - сommit SHA;
// * ОписаниеОшибки - Строка - описание ошибки при работе с файлами;
//
Процедура СохранитьВнешниеФайлы( Знач ОбработчикСобытия, Знач CommitSHA, Знач ОписаниеФайлов ) Экспорт
	
	СохранитьДанные( "ВнешниеФайлы", ОбработчикСобытия, CommitSHA, ОписаниеФайлов );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьДанные( Знач РегистрСведений, Знач ОбработчикСобытия, Знач Ключ, Знач Данные )
	
	Перем ХранилищеЗначения;
	Перем НаборЗаписей;
	Перем ВыбраннаяЗапись;
	Перем ДополнительныеПараметры;
	Перем ТекстСообщения;
	
	ХранилищеЗначения = Новый ХранилищеЗначения( Данные );

	НачатьТранзакцию();
		
	Попытка

		НаборЗаписей = РегистрыСведений[ РегистрСведений ].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбработчикСобытия.Установить( ОбработчикСобытия );
		НаборЗаписей.Отбор.Ключ.Установить( Ключ );
		НаборЗаписей.Прочитать();
	
		ВыбраннаяЗапись = ?( НаборЗаписей.Количество() = 0, НаборЗаписей.Добавить(), НаборЗаписей[0] );		
		
		ВыбраннаяЗапись.ОбработчикСобытия = ОбработчикСобытия;
		ВыбраннаяЗапись.Ключ = Ключ;
		ВыбраннаяЗапись.Данные = ХранилищеЗначения;
		
		НаборЗаписей.Записать();
		 
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ( ТранзакцияАктивна() ) Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();
		ДополнительныеПараметры.Объект = ОбработчикСобытия;
		
		ТекстСообщения = НСтр( "ru = '[%1]: данные не были сохранены.'" );
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ТекстСообщения = СтрШаблон( ТекстСообщения, РегистрСведений );
				
		Логирование.Предупреждение( "Core.СохранениеДанных", ТекстСообщения, ДополнительныеПараметры );
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


