#Область ПрограммныйИнтерфейс

// Запускает задание по обработке данных, полученных из запроса сервера GitLab, либо запускает задание по ранее
// сохраненным данным из полученных ранее запросов.
// 
// Параметры:
// 	ОбработчикСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
// 	ОбрабатываемыеДанные - Соответствие, Строка - преобразованное в коллекцию тело запроса или CommitSHA ранее
// 													сохраненного запроса;
//
// Возвращаемое значение:
// 	Неопределено, ФоновоеЗадание - созданное ФоновоеЗадание или Неопределено, если были ошибки;
//
Функция НачатьЗапускОбработкиДанных( Знач ОбработчикСобытия, Знач ОбрабатываемыеДанные ) Экспорт
	
	Перем CommitSHA;
	Перем ПараметрыЗадания;
	Перем ПараметрыЛогирования;
	Перем Сообщение;
	Перем Результат;
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );

	Сообщение = "";
	Результат = Неопределено;
	
	Если ( ТипЗнч(ОбрабатываемыеДанные) = Тип("Строка") ) Тогда
		
		CommitSHA = ОбрабатываемыеДанные;
		ДанныеЗапроса = Неопределено;
	
	ИначеЕсли ( ТипЗнч(ОбрабатываемыеДанные) = Тип("Соответствие") ) Тогда
		
		CommitSHA = ОбрабатываемыеДанные.Получить( "checkout_sha" );
		ДанныеЗапроса = ОбрабатываемыеДанные;
		
		Если ( CommitSHA = Неопределено ) Тогда
			
			Сообщение = НСтр( "ru = 'В обрабатываемых данных отсутствует checkout_sha.'" );
			
		КонецЕсли;

	Иначе
		
		Сообщение = НСтр( "ru = 'Неподдерживаемый формат обрабатываемых данных.'" );
		
	КонецЕсли;
	
	Если ( НЕ ПустаяСтрока(Сообщение) ) Тогда
	
		Логирование.Ошибка( "Core.ОбработкаДанных", Сообщение, ПараметрыЛогирования );
		
		Возврат Результат;
	
	КонецЕсли;
	
	Если ( ЕстьАктивноеЗадание(CommitSHA) ) Тогда
		
		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "задание уже было запущено и активно." );
		Логирование.Предупреждение( "Core.ОбработкаДанных", Сообщение, ПараметрыЛогирования );
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить( ОбработчикСобытия );
	ПараметрыЗадания.Добавить( CommitSHA );
	ПараметрыЗадания.Добавить( ДанныеЗапроса );

	Попытка
		
		Результат = ФоновыеЗадания.Выполнить( "ОбработкаДанных.ОбработатьДанные",
												ПараметрыЗадания,
												CommitSHA,
												"Обработка данных" );
		
	Исключение
		
		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "ошибка запуска обработки данных." );
		Сообщение = Сообщение + Символы.ПС + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		Логирование.Ошибка( "Core.ОбработкаДанных", Сообщение, ПараметрыЛогирования );
		
	КонецПопытки;
 
	Возврат Результат;
											
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьДанные( Знач ОбработчикСобытия, Знач CommitSHA, Знач ДанныеЗапроса ) Экспорт
	
	Перем ОтправляемыеДанные;
	Перем ПараметрыЛогирования;
	Перем Сообщение;
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );

	Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "обработка данных..." );
	Логирование.Информация( "Core.ОбработкаДанных.Начало", Сообщение, ПараметрыЛогирования );	
	
	ОтправляемыеДанные = Неопределено;
	ПодготовитьДанные( ОбработчикСобытия, CommitSHA, ДанныеЗапроса, ОтправляемыеДанные );
	
	Если ( НЕ ЗначениеЗаполнено(ДанныеЗапроса) ИЛИ НЕ ЗначениеЗаполнено(ОтправляемыеДанные) ) Тогда
		
		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "нет данных для отправки." );
		Логирование.Информация( "Core.ОбработкаДанных.Окончание", Сообщение, ПараметрыЛогирования );
		
		Возврат;
		
	КонецЕсли;
	
	ОтправляемыеДанные = Маршрутизация.РаспределитьОтправляемыеДанныеПоМаршрутам( ОтправляемыеДанные, ДанныеЗапроса );		
	ОтправитьДанныеПоМаршрутам( ОбработчикСобытия, CommitSHA, ОтправляемыеДанные );

	Логирование.Информация( "Core.ОбработкаДанных.Окончание", Сообщение, ПараметрыЛогирования );	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьДанные( Знач ОбработчикСобытия, Знач CommitSHA, ДанныеЗапроса, ОтправляемыеДанные )

	Перем ПараметрыЛогирования;	
	Перем Сообщение;

	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "подготовка данных к отправке." );
	
	Логирование.Информация( "Core.ПодготовкаДанных.Начало", Сообщение, ПараметрыЛогирования );

	Если ( ДанныеЗапроса <> Неопределено ) Тогда
		
		ОтправляемыеДанные = Gitlab.ПолучитьФайлыКОтправкеПоДаннымЗапроса( ОбработчикСобытия, ДанныеЗапроса );
		Маршрутизация.ДополнитьЗапросНастройкамиМаршрутизации(ДанныеЗапроса, ОтправляемыеДанные );
		
		СохранитьДанные( ОбработчикСобытия, CommitSHA, ДанныеЗапроса, ОтправляемыеДанные );
		
	Иначе

		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "загрузка ранее сохраненных данных." );
		Логирование.Информация( "Core.ПодготовкаДанных", Сообщение, ПараметрыЛогирования );
				
		ЗагрузитьДанные( ОбработчикСобытия, CommitSHA, ДанныеЗапроса, ОтправляемыеДанные );
		
	КонецЕсли;

	Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "подготовка данных к отправке." );
	Логирование.Информация( "Core.ПодготовкаДанных.Окончание", Сообщение, ПараметрыЛогирования );
	
КонецПроцедуры

Процедура ОтправитьДанныеПоМаршрутам( Знач ОбработчикСобытия, Знач CommitSHA, Знач ОтправляемыеДанные )
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	
	ПараметрыДоставки = НастройкаСервисов.ПараметрыПолучателя(); 
	
	Для каждого ОтправляемыйФайл Из ОтправляемыеДанные Цикл
		
		Если НЕ ПустаяСтрока(ОтправляемыйФайл.ОписаниеОшибки) Тогда
			
			ТекстСообщения = НСтр( "ru = '[ " + CommitSHA + " ]: при получении данных была ошибка:'" );
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОтправляемыйФайл.ОписаниеОшибки;
			Логирование.Предупреждение( "Core.ПередачаФайлаПолучателю", ТекстСообщения, ПараметрыЛогирования );
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого АдресДоставки Из ОтправляемыйФайл.АдресаДоставки Цикл
			
			ПараметрыДоставки.Адрес = АдресДоставки;
			
			КлючОтправкиФайла = CommitSHA + "|" + АдресДоставки + "|" + ОтправляемыйФайл.ИмяФайла;
			
			ПараметрыЗадания = Новый Массив();
			ПараметрыЗадания.Добавить( ОтправляемыйФайл.ИмяФайла );
			ПараметрыЗадания.Добавить( ОтправляемыйФайл.ДвоичныеДанные );
			ПараметрыЗадания.Добавить( ПараметрыДоставки );
			
			Попытка
				
				АктивныеЗадания = АктивныеЗадания( КлючОтправкиФайла );
				
				Если ЗначениеЗаполнено(АктивныеЗадания) Тогда
					
					ТекстСообщения = НСтр("ru = '%1: Задание отправки файла уже было запущено и активно: КлючФайла: %2'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, CommitSHA, КлючОтправкиФайла);
					Логирование.Предупреждение( "Core.ПередачаФайлаПолучателю", ТекстСообщения, ПараметрыЛогирования );
					
					Продолжить;
					
				КонецЕсли;
				
				ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("Получатели.ОтправитьФайл",
																ПараметрыЗадания,
																КлючОтправкиФайла,
																"Отправка данных");
			Исключение
				
				ТекстСообщения = НСтр("ru = '%1: UUID: %2; %3'");
				ТекстСообщения = СтрШаблон(ТекстСообщения,
										   CommitSHA,
										   ЗаданиеОтправкаФайла.УникальныйИдентификатор,
										   ИнформацияОбОшибке().Описание);
										   
				Логирование.Ошибка("Core.ПередачаФайлаПолучателю", ТекстСообщения, ПараметрыЛогирования );
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = '%1: количество файлов к отправке: %2'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, CommitSHA, ОтправляемыеДанные.Количество());
	Логирование.Информация("Core.ОбработкаДанныхВФоне.Окончание", ТекстСообщения, ПараметрыЛогирования );
	
КонецПроцедуры

Функция АктивныеЗадания( Знач Ключ )
	
	Перем ПараметрыОтбора;
	
	ПараметрыОтбора = Новый Структура( "Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно );

	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания( ПараметрыОтбора );
	
КонецФункции

Функция ЕстьАктивноеЗадание( Знач Ключ )
	
	Возврат ЗначениеЗаполнено( АктивныеЗадания(Ключ) );
	
КонецФункции

Процедура СообщитьОРезультатеЗагрузки( Знач ОбработчикСобытия, Знач CommitSHA, Знач Идентификатор, Знач Результат )
	
	Перем ПараметрыЛогирования;
	Перем Сообщение;

	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	
	Если ( ЗначениеЗаполнено(Результат) ) Тогда
		
		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "[" + Идентификатор +"]: загружено." );
		Логирование.Информация( "Core.ПодготовкаДанных", Сообщение, ПараметрыЛогирования );
		
	Иначе
		
		Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "[" + Идентификатор +"]: не найдено." );
		Логирование.Предупреждение( "Core.ПодготовкаДанных", Сообщение, ПараметрыЛогирования );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОРезультатеСохранения( Знач ОбработчикСобытия, Знач CommitSHA, Знач Идентификатор )
	
	Перем ПараметрыЛогирования;
	Перем Сообщение;
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	Сообщение = Логирование.ИдентифицированноеСообщение( CommitSHA, "[" + Идентификатор +"]: сохранено." );
	Логирование.Информация( "Core.ПодготовкаДанных", Сообщение, ПараметрыЛогирования );
		
КонецПроцедуры

Процедура ЗагрузитьДанные( Знач ОбработчикСобытия, Знач CommitSHA, ДанныеЗапроса, ОтправляемыеДанные )

	ДанныеЗапроса = ОбработчикиСобытий.ЗагрузитьДанныеЗапроса( ОбработчикСобытия, CommitSHA );
	СообщитьОРезультатеЗагрузки( ОбработчикСобытия, CommitSHA, "данные запроса", ДанныеЗапроса );

	ОтправляемыеДанные = ОбработчикиСобытий.ЗагрузитьВнешниеФайлы( ОбработчикСобытия, CommitSHA );
	СообщитьОРезультатеЗагрузки( ОбработчикСобытия, CommitSHA, "отправляемые данные", ОтправляемыеДанные );
	
КонецПроцедуры

Процедура СохранитьДанные( Знач ОбработчикСобытия, Знач CommitSHA, ДанныеЗапроса, ОтправляемыеДанные )

	ОбработчикиСобытий.СохранитьДанныеЗапроса( ОбработчикСобытия, CommitSHA, ДанныеЗапроса );
	СообщитьОРезультатеСохранения( ОбработчикСобытия, CommitSHA, "данные запроса" );
	
	ОбработчикиСобытий.СохранитьВнешниеФайлы( ОбработчикСобытия, CommitSHA, ОтправляемыеДанные );
	СообщитьОРезультатеСохранения( ОбработчикСобытия, CommitSHA, "отправляемые данные" );
		
Конецпроцедуры

#КонецОбласти