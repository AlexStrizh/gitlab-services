#Область ПрограммныйИнтерфейс

// Описание
// 
// Параметры:
// 	ОбработчикСобытия
// 	ОбрабатываемыеДанные
// Возвращаемое значение:
// 	Неопределено, ФоновоеЗадание - Описание
//
Функция НачатьЗапускОбработкиДанных( Знач ОбработчикСобытия, Знач ОбрабатываемыеДанные ) Экспорт
	
	Перем CommitSHA;
	Перем ПараметрыЗадания;
	Перем ТекстСообщения;
	Перем ПараметрыЛогирования;

	ТекстСообщения = "";
	Результат = Неопределено;
	
	Если ( ТипЗнч(ОбрабатываемыеДанные) = Тип("Строка") ) Тогда
		
		CommitSHA = ОбрабатываемыеДанные;
		ДанныеЗапроса = Неопределено;
	
	ИначеЕсли ( ТипЗнч(ОбрабатываемыеДанные) = Тип("Соответствие") ) Тогда
		
		CommitSHA = ОбрабатываемыеДанные.Получить( "checkout_sha" );
		ДанныеЗапроса = ОбрабатываемыеДанные;
		
		Если ( CommitSHA = Неопределено ) Тогда
			
			ТекстСообщения = НСтр( "ru = 'В обрабатываемых данных отсутствует checkout_sha.'" );
			
		КонецЕсли;

	Иначе
		
		ТекстСообщения = НСтр( "ru = 'Неподдерживаемый формат обрабатываемых данных.'" );
		
	КонецЕсли;
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	
	Если ( НЕ ПустаяСтрока(ТекстСообщения) ) Тогда
	
		Логирование.Ошибка( "Core.ОбработкаДанных", ТекстСообщения, ПараметрыЛогирования );
		
		Возврат Результат;
	
	КонецЕсли;
	
	Если ( ЕстьАктивноеЗадание(CommitSHA) ) Тогда
		
		ТекстСообщения = НСтр("ru = '[ %1 ]: задание уже было запущено и активно.'");
		ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );
		Логирование.Предупреждение( "Core.ОбработкаДанных", ТекстСообщения, ПараметрыЛогирования );
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить( ОбработчикСобытия );
	ПараметрыЗадания.Добавить( CommitSHA );
	ПараметрыЗадания.Добавить( ДанныеЗапроса );

	Попытка
		
		Результат = ФоновыеЗадания.Выполнить( "ОбработкаДанных.ОбработатьДанные", ПараметрыЗадания, CommitSHA, "Обработка данных." );
		
	Исключение
		
		ТекстСообщения = НСтр("ru = '[ %1 ]: ошибка запуска фонового задания обработки данных.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );		
		Логирование.Ошибка( "Core.ОбработкаДанных", ТекстСообщения, ПараметрыЛогирования );
		
	КонецПопытки;
 
	Возврат Результат;
											
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьДанные( Знач ОбработчикСобытия, Знач CommitSHA, Знач ДанныеЗапроса ) Экспорт
	
	Перем ОтправляемыеДанные;
	Перем ТекстСообщения;
	Перем ПараметрыЛогирования;
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	ТекстСообщения = НСтр( "ru = '%1: Обработка данных...'" );
	ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );
	Логирование.Информация( "Core.ОбработкаДанных.Начало", ТекстСообщения, ПараметрыЛогирования );	
	
	ОтправляемыеДанные = Неопределено;
	ПодготовитьДанные( ОбработчикСобытия, CommitSHA, ДанныеЗапроса, ОтправляемыеДанные );
	
	Если ( НЕ ЗначениеЗаполнено(ДанныеЗапроса) ИЛИ НЕ ЗначениеЗаполнено(ОтправляемыеДанные) ) Тогда
		
		ТекстСообщения = НСтр("ru = '%1: Нет данных для отправки.'");
		ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );
		Логирование.Информация( "Core.ОбработкаДанных.Окончание", ТекстСообщения, ПараметрыЛогирования );
		
		Возврат;
		
	КонецЕсли;
	
	ОтправляемыеДанные = Маршрутизация.РаспределитьОтправляемыеДанныеПоМаршрутам( ОтправляемыеДанные, ДанныеЗапроса );		
	ОтправитьДанныеПоМаршрутам( ОбработчикСобытия, ОтправляемыеДанные, CommitSHA );

	Логирование.Информация( "Core.ОбработкаДанных.Окончание", ТекстСообщения, ПараметрыЛогирования );	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьДанные( Знач ОбработчикСобытия, Знач CommitSHA, ДанныеЗапроса, ОтправляемыеДанные )
	
	Перем ТекстСообщения;
	Перем ПараметрыЛогирования;

	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	ТекстСообщения = НСтр( "ru = '%1: подготовка данных к отправке.'" );
	ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );
	
	Логирование.Информация("Core.ПодготовкаДанных.Начало", ТекстСообщения, ПараметрыЛогирования);

	Если ( ДанныеЗапроса = Неопределено ) Тогда
		
		ДанныеЗапроса = ОбработчикиСобытий.ВосстановитьДанныеЗапроса( ОбработчикСобытия, CommitSHA );
		ОтправляемыеДанные = ОбработчикиСобытий.ВосстановитьВнешниеФайлы( ОбработчикСобытия, CommitSHA );
		
		ТекстСообщения = НСтр( "ru = '%1: данные восстановлены из базы данных.'" );
		ТекстСообщения = СтрШаблон( ТекстСообщения, CommitSHA );
		Логирование.Информация( "Core.ПодготовкаДанных", ТекстСообщения, ПараметрыЛогирования );
		
	Иначе
		
		ОтправляемыеДанные = Gitlab.ПолучитьФайлыКОтправкеПоДаннымЗапроса( ОбработчикСобытия, ДанныеЗапроса );
		Маршрутизация.ДополнитьЗапросНастройкамиМаршрутизации(ДанныеЗапроса, ОтправляемыеДанные );
		ОбработчикиСобытий.СохранитьДанныеЗапроса( ОбработчикСобытия, CommitSHA, ДанныеЗапроса );
		ОбработчикиСобытий.СохранитьВнешниеФайлы( ОбработчикСобытия, CommitSHA, ОтправляемыеДанные );
		
	КонецЕсли;
	
	Логирование.Информация( "Core.ПодготовкаДанных.Окончание", ТекстСообщения, ПараметрыЛогирования );
	
КонецПроцедуры
 
Процедура ОтправитьДанныеПоМаршрутам( Знач ОбработчикСобытия, Знач ОтправляемыеДанные, Знач CommitSHA )
	
	ПараметрыЛогирования = Логирование.ДополнительныеПараметры( ОбработчикСобытия );
	
	ПараметрыДоставки = НастройкаСервисов.ПараметрыПолучателя(); 
	
	Для каждого ТочкаДоставки Из ОтправляемыеДанные Цикл
		
		ПараметрыДоставки.АдресДоставки = ТочкаДоставки.Адрес;
		
		КлючОтправкиФайла = CommitSHA + "|" + ТочкаДоставки.ИмяФайла + "|" + ТочкаДоставки.Адрес;
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить( ТочкаДоставки.ИмяФайла );
		ПараметрыЗадания.Добавить( ТочкаДоставки.ДвоичныеДанные );
		ПараметрыЗадания.Добавить( ПараметрыДоставки );
		
		Попытка
			
			АктивныеЗадания = АктивныеЗадания( КлючОтправкиФайла );
			
			Если ЗначениеЗаполнено(АктивныеЗадания) Тогда
				
				ТекстСообщения = НСтр("ru = '%1: Задание отправки файла уже было запущено и активно: КлючФайла: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, CommitSHA, КлючОтправкиФайла);
				Логирование.Предупреждение( "Core.ПередачаФайлаВИБПриемник", ТекстСообщения, ПараметрыЛогирования );
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаданиеОтправкаФайла = ФоновыеЗадания.Выполнить("Получатели.ОтправитьФайл",
															ПараметрыЗадания,
															КлючОтправкиФайла,
															"СервисыGitLab: " + CommitSHA);
		Исключение
			
			ТекстСообщения = НСтр("ru = '%1: UUID: %2; %3'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
									   CommitSHA,
									   ЗаданиеОтправкаФайла.УникальныйИдентификатор,
									   ИнформацияОбОшибке().Описание);
									   
			Логирование.Ошибка("Core.ПередачаФайлаВИБПриемник", ТекстСообщения, ПараметрыЛогирования );
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = '%1: количество файлов к отправке: %2'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, CommitSHA, ОтправляемыеДанные.Количество());
	Логирование.Информация("Core.ОбработкаДанныхВФоне.Окончание", ТекстСообщения, ПараметрыЛогирования );
	
КонецПроцедуры

Функция АктивныеЗадания( Знач Ключ )
	
	Перем ПараметрыОтбора;
	
	ПараметрыОтбора = Новый Структура( "Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно );

	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания( ПараметрыОтбора );
	
КонецФункции

Функция ЕстьАктивноеЗадание( Знач Ключ )
	
	Возврат ЗначениеЗаполнено( АктивныеЗадания(Ключ) );
	
КонецФункции

#КонецОбласти