#Область СлужебныеПроцедурыИФункции

#Область HTTPМетоды

Функция ServicesGET( Запрос )
	
	Перем ОписаниеСервиса;
	Перем Ответ;
	
	Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().OK );
	
	ОписаниеСервиса = HTTPСервисы.ОписаниеСервиса( "gitlab" );
	
	ТелоОтвета = Новый Структура();
	ТелоОтвета.Вставить( "version", Метаданные.Версия );
	ТелоОтвета.Вставить( "services", ОписаниеСервиса );
	
	Ответ.Заголовки.Вставить( "Content-Type", "application/json" );
	Ответ.УстановитьТелоИзСтроки( КоннекторHTTP.ОбъектВJson(ТелоОтвета) );
	
	Возврат Ответ;
	
КонецФункции

Функция WebhooksPOST( Запрос )
	
	Перем ОбработчикСобытия;
	Перем ДанныеТелаЗапроса;
	Перем Ответ;

	Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().OK );
	
	ОбработчикСобытия = Неопределено;
	ПроверитьСекретныйКлюч( Запрос, Ответ, ОбработчикСобытия );
	ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ );
	ПроверитьЗаголовкиЗапросаWebhooksPOST( ОбработчикСобытия, Запрос, Ответ );

	ДанныеТелаЗапроса = Неопределено;
	ПолучитьДанныеТелаЗапроса( ОбработчикСобытия, Запрос, Ответ, ДанныеТелаЗапроса );
	ПроверитьНаличиеОбязательныхДанныхВТелеЗапроса( ОбработчикСобытия, ДанныеТелаЗапроса, Ответ );
	
	Если ( КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		СервисыGitLab.ЗапуститьОбработкуДанныхВФоне( ОбработчикСобытия, ДанныеТелаЗапроса );
		
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();
		ДополнительныеПараметры.Объект = ОбработчикСобытия;
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр( "ru = 'Запрос обработан.'" );
		Логирование.Информация( "GitLab.ОбработкаЗапроса.Окончание", ТекстСообщения, ДополнительныеПараметры );
		
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

#КонецОбласти

Процедура ПроверитьСекретныйКлюч( Знач Запрос, Ответ, ОбработчикСобытия )

	Перем Token;
	Перем ТекстСообщения;	
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Token = Запрос.Заголовки.Получить( "X-Gitlab-Token" );
	ОбработчикСобытия = ОбработчикиСобытий.НайтиПоСекретномуКлючу( Token );

	Если ( НЕ ЗначениеЗаполнено(ОбработчикСобытия) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().FORBIDDEN );
		
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();	
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр( "ru = 'Секретный ключ не найден.'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
										 
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьДоступностьФункциональностиЗагрузкиИзВнешнегоРепозитория( Ответ )
	
	Перем ТекстСообщения;
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ ПолучитьФункциональнуюОпцию("ОбрабатыватьЗапросыВнешнегоХранилища") ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().LOCKED );
		Ответ.Причина = "Loading of the files is disabled";
		ДополнительныеПараметры = Логирование.ДополнительныеДанные();	
		ДополнительныеПараметры.HTTPСервисОтвет = Ответ;
		ТекстСообщения = НСтр( "ru = 'Отключен функционал загрузки из внешнего хранилища.'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );

	КонецЕсли;

КонецПроцедуры

// Проверяет что запрос пришел от репозитория для хранения внешних отчетов и обработок.
// 
// Параметры:
// 	Запрос - Запрос - HTTP-запрос;
// Возвращаемое значение:
// 	Булево - Истина, если это репозиторий для внешних отчетов и обработок, иначе - Ложь.
//
Функция ЭтоРепозиторийВнешнихОтчетовИОбработок( Знач Запрос )
	
	Перем ТипВнешнегоХранилища;
	
	ТипВнешнегоХранилища = Запрос.ПараметрыURL.Получить( "ТипВнешнегоХранилища" );
	Возврат ( ТипВнешнегоХранилища <> Неопределено И ТипВнешнегоХранилища = "epf" );
	
КонецФункции

// Проверяет является ли запрос событием "Push Hook" и end-point выбран push.
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - HTTP-запрос;
// Возвращаемое значение:
// 	Булево - Истина - запрос является Push Hook, иначе - Ложь.
//
Функция ЭтоСобытиеPush( Знач Запрос )
	
	Перем Событие;
	Перем ИмяМетода;
	
	Событие = Запрос.Заголовки.Получить( "X-Gitlab-Event" );
	ИмяМетода = Запрос.ПараметрыURL.Получить( "ИмяМетода" );
	
	Возврат ( ЗначениеЗаполнено(Событие) И (Событие = "Push Hook") И (ИмяМетода = "push") );
	
КонецФункции

Процедура ПроверитьЗаголовкиЗапросаWebhooksPOST( Знач ИдентификаторСобытия, Знач Запрос, Ответ )
	
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ИдентификаторСобытия;

	Если ( НЕ ЭтоРепозиторийВнешнихОтчетовИОбработок(Запрос) ) Тогда

		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		ТекстСообщения = НСтр( "ru = 'Сервис доступен только для внешних отчетов и обработок.'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
												 
		Возврат;
	
	КонецЕсли;
	
	Если ( НЕ ЭтоСобытиеPush(Запрос) ) Тогда
		
		Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
		ТекстСообщения = НСтр( "ru = 'Сервис обрабатывает только события ""Push Hook"".'" );
		Логирование.Предупреждение( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
												 
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

// Десериализует тело HTTP запроса из текста в формате JSON в универсальную коллекцию.
// 
// Параметры:
// 	ИдентификаторСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
// 	Запрос - HTTPСервисЗапрос - HTTP-запрос;
// 	Ответ - HTTPСервисОтвет - HTTP-ответ;
// 	Данные - Соответствие - (исходящий параметр) десериализованное тело запроса; исходный текст тела запроса
//		добавляется в структуру с ключом "json".
//
Процедура ПолучитьДанныеТелаЗапроса( Знач ИдентификаторСобытия, Знач Запрос, Ответ, Данные = Неопределено )
	
	Перем Поток;
	Перем ПараметрыПреобразования;
	Перем ДополнительныеПараметры;
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ИдентификаторСобытия;	
	
	ТекстСообщения = НСтр( "ru = 'Начало получения тела запроса...'" );
	Логирование.Информация( "GitLab.ОбработкаЗапроса.Начало", ТекстСообщения, ДополнительныеПараметры );
	
	Поток = Неопределено;
	
	Попытка
		
		Поток = Запрос.ПолучитьТелоКакПоток();
		
		ПараметрыПреобразования = Новый Структура();
		ПараметрыПреобразования.Вставить( "ПрочитатьВСоответствие", Истина );
		ПараметрыПреобразования.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
		
		Данные = КоннекторHTTP.JsonВОбъект( Поток, , ПараметрыПреобразования );
		ОбщегоНазначения.ДополнитьКоллекциюТекстомИзПотока(Поток, "json", Данные);
		
		Поток.Закрыть();
		
		ТекстСообщения = НСтр( "ru = 'Окончание получения тела запроса...'" );
		Логирование.Информация( "GitLab.ОбработкаЗапроса.Окончание", ТекстСообщения, ДополнительныеПараметры );

	Исключение
		
		Поток.Закрыть();
		ТекстСообщения = НСтр( "ru = '" + ИнформацияОбОшибке().Описание + "'" );
		Логирование.Ошибка( "GitLab.ОбработкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверяемыеЭлементы( Знач ДанныеТелаЗапроса )
	
	Перем Проект;
	Перем Коммиты;
	Перем Результат;
	
	Результат = Новый Соответствие();
	Результат.Вставить( "тело запроса" , ДанныеТелаЗапроса ); //TODO что за шляпа "тело запроса", непонятно, может root?		
	Результат.Вставить( "checkout_sha" , ДанныеТелаЗапроса.Получить("checkout_sha") );
	
	Проект = ДанныеТелаЗапроса.Получить("project");
	Результат.Вставить( "project" , Проект );
	
	Если ( Проект <> Неопределено ) Тогда
		
		Результат.Вставить( "project/web_url" , Проект.Получить("web_url") );
		Результат.Вставить( "project/id" , Проект.Получить("id") );
		
	КонецЕсли;
	
	Коммиты = ДанныеТелаЗапроса.Получить("commits");
	Результат.Вставить( "commits" , Коммиты );
	
	Если ( Коммиты <> Неопределено ) Тогда
		
		Для Индекс = 0 По Коммиты.ВГраница() Цикл
			
			Результат.Вставить( "commits[" + Строка(Индекс) + "]/id", Коммиты[Индекс].Получить("id") );
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет сериализованные данные тела запроса на наличие обязательных данных.
// 
// Параметры:
// 	ОбработчикСобытия - СправочникСсылка.ОбработчикиСобытий - ссылка на элемент справочника с обработчиками событий;
// 	ДанныеТелаЗапроса - Соответствие - сериализованные данные HTTP-запроса;
// 	Ответ - HTTPСервисОтвет - HTTP-ответ;
//
Процедура ПроверитьНаличиеОбязательныхДанныхВТелеЗапроса(Знач ОбработчикСобытия, Знач ДанныеТелаЗапроса, Ответ)
	
	Если ( НЕ КодОтветаHTTP.isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;

	ДополнительныеПараметры = Логирование.ДополнительныеДанные();
	ДополнительныеПараметры.Объект = ОбработчикСобытия;
	ТекстСообщения = НСтр("ru = 'Начало проверки тела запроса...'");
	Логирование.Информация( "GitLab.ПроверкаЗапроса.Начало", ТекстСообщения, ДополнительныеПараметры );
	
	Коллекция = ПроверяемыеЭлементы( ДанныеТелаЗапроса );
	
	Для Каждого Элемент Из Коллекция Цикл
		
		Если ( Элемент.Значение = Неопределено ) Тогда
			
			Ответ = Новый HTTPСервисОтвет( КодОтветаHTTP.КодыОтветаHTTP().BAD_REQUEST );
			ТекстСообщения = НСтр( "ru = 'В данных запроса отсутствует %1.'" );
			ТекстСообщения = СтрШаблон( ТекстСообщения, Элемент.Ключ );
			Логирование.Ошибка( "GitLab.ПроверкаЗапроса", ТекстСообщения, ДополнительныеПараметры );
			
			Возврат;		
			
		КонецЕсли;		
		
	КонецЦикла;
	
	ТекстСообщения = НСтр( "ru = 'Окончание проверки тела запроса...'" );
	Логирование.Информация( "GitLab.ПроверкаЗапроса.Окончание", ТекстСообщения, ДополнительныеПараметры );
	
КонецПроцедуры

#КонецОбласти