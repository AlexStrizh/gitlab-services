#Область ПрограммныйИнтерфейс

// Поиск элементов справочника по секретному ключу (token), не помеченные на удаление.
//
// Параметры:
// 	Token - Строка - секретный ключ (token);
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбработчикиСобытий - найденные элементы справочника (пустой массив, если не найдено); 
//
Функция НайтиПоСекретномуКлючу( Знач Token ) Экспорт
	
	Перем Запрос;
	Перем Результат;
	
	Результат = Новый Массив();
	
	Если ( ТипЗнч(Token) <> Тип("Строка") ИЛИ ПустаяСтрока(Token) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр( "СекретныйКлюч", Token );
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ОбработчикиСобытий.Ссылка КАК Ссылка
	               	|ИЗ
	               	|	Справочник.ОбработчикиСобытий КАК ОбработчикиСобытий
	               	|ГДЕ
	               	|	НЕ ОбработчикиСобытий.ПометкаУдаления
	               	|	И ОбработчикиСобытий.СекретныйКлюч = &СекретныйКлюч";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку( "Ссылка" );
	
КонецФункции

// Загружает в табличную часть объекта данные из журнала регистрации по фильтру.
// 
// Параметры:
// 	Object - СправочникОбъект.ОбработчикиСобытий - объект обработчика событий; 
// 	Destination - Строка - имя табличной части;
// 	Filter - Структура - фильтр отбора для журнала регистрации (См. ГлобальныйКонтекст.ВыгрузитьЖурналРегистрации);
// 	RecordsLoaded - Число - (возвращаемый параметр) количество загруженных записей;
//
Процедура ЗагрузитьИсториюСобытий( Object, Val Destination, Val Filter, RecordsLoaded ) Экспорт

	Если ТипЗнч(Object) <> Тип("СправочникОбъект.ОбработчикиСобытий") Тогда
		
		Возврат;
		
	КонецЕсли;	

	Object[Destination].Очистить();

	ДанныеЖурналаРегистрации = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации( ДанныеЖурналаРегистрации, Filter );
	
	Для каждого ЗаписьЖурналаРегистрации Из ДанныеЖурналаРегистрации Цикл
		
		ОписаниеСобытия = ОписаниеСобытияПоЗаписиЖурналаРегистрации( ЗаписьЖурналаРегистрации );
		
		Если ( ОписаниеСобытия.ИмяОбъекта <> "ОбработчикиСобытий" ) Тогда
			
			Продолжить;
			
		КонецЕсли;

		НоваяЗаписьИстории = Object[Destination].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьИстории, ЗаписьЖурналаРегистрации);
		ЗаполнитьЗначенияСвойств(НоваяЗаписьИстории, ОписаниеСобытия);
 		
		RecordsLoaded = RecordsLoaded + 1;

	КонецЦикла;
	
	Object.Записать();

КонецПроцедуры

#EndRegion

#Область ОбработчикиПроведения

#EndRegion

#Область ОбработчикиСобытий

#EndRegion

#Region Private

// Возвращает структурированное описание события по данным записи журнала регистрации.
// Описание строится по данным колонки "Событие" таблицы значений, полученной выгрузкой через
// ГлобальныйКонтекст.ВыгрузитьЖурналРегистрации.
// Формат строки события: "ИмяОбъекта.Операция.Действие1.Действие2...ДействиеN[.КодОшибки]".  
// 
// Параметры:
// 	ЗаписьЖурналаРегистрации - СтрокаТаблицыЗначений - строка таблицы значений выгрузки из журнала регистрации;
//
// Возвращаемое значение:
// 	Структура - описание:
// * ИмяОбъекта - Строка - абстракция, к которой привязывается событие, для отделения его от глобального контекста;
// * Операция - Строка - операция, к которой привязывается событие;
// * ПредставлениеСобытия - Строка - представление события в формате: "Действие1.Действие2...ДействиеN";
// * КодСостоянияHTTP - Число - код состояния HTTP или 0, если кода нет; 
//
Функция ОписаниеСобытияПоЗаписиЖурналаРегистрации( Знач ЗаписьЖурналаРегистрации )
	
	Перем ЭлементыСобытия;
	Перем Результат;
	
	Результат = Новый Структура();
	Результат.Вставить( "Событие", ЗаписьЖурналаРегистрации.Событие );
	Результат.Вставить( "ИмяОбъекта", "" );
	Результат.Вставить( "Операция", "" );
	Результат.Вставить( "ПредставлениеСобытия", "" );
	Результат.Вставить( "КодСостоянияHTTP", 0 );
	
	ЭлементыСобытия = СтрРазделить( ЗаписьЖурналаРегистрации.Событие, "." );
	
	Если ЭлементыСобытия.Количество() < 3 Тогда
		
		Возврат Результат;
							
	КонецЕсли;

	Результат.ИмяОбъекта = ЭлементыСобытия[ 0 ];
	Результат.Операция = ЭлементыСобытия[ 1 ];
	Результат.КодСостоянияHTTP = КодСостоянияHTTP( ЭлементыСобытия );
	Результат.ПредставлениеСобытия = ПредставлениеСобытия( ЭлементыСобытия, Результат.КодСостоянияHTTP );
	
	Возврат Результат;
	
КонецФункции

Функция КодСостоянияHTTP( Знач ЭлементыСобытия )

	Перем ОписаниеТипа;
	Перем ПоследнийЭлемент;
	
	ПоследнийЭлемент = ЭлементыСобытия[ ЭлементыСобытия.ВГраница() ];
	ОписаниеТипа = Новый ОписаниеТипов( "Число" );
	
	Возврат ОписаниеТипа.ПривестиЗначение( ПоследнийЭлемент );
	
КонецФункции

Функция ПредставлениеСобытия( Знач ЭлементыСобытия, Знач КодСостоянияHTTP )

	Перем ИндексПоследнегоЭлемента;
	Перем Индекс;
	
	ИндексПоследнегоЭлемента = ЭлементыСобытия.ВГраница();
	ГраницаПредставленияСобытия = ?( КодСостоянияHTTP = 0, ИндексПоследнегоЭлемента, ИндексПоследнегоЭлемента - 1 );

	ПредставлениеСобытия = Новый Массив;
	
	Для Индекс = 2 По ГраницаПредставленияСобытия Цикл
		
		ПредставлениеСобытия.Добавить( ЭлементыСобытия[Индекс] );
		
	КонецЦикла;
	
	Возврат СтрСоединить( ПредставлениеСобытия, "." )
	
КонецФункции

#EndRegion