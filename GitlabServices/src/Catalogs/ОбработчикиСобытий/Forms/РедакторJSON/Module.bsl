#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере( Отказ, СтандартнаяОбработка )
	
	Если ( Параметры.КлючЗаписи.Пустой() ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьВидФормы( Параметры.ИмяКоманды );
	ЗаполнитьДанныеФормы( Параметры.КлючЗаписи );

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПользовательскийВариантПриИзменении( Элемент )
	
	Перем ТекущиеДанные;
	Перем СбросФлага;
	Перем Режим;
	Перем Оповещение;
	
	ТекущиеДанные = Элементы.Commits.ТекущиеДанные;
	
	Если ( ТекущиеДанные = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СбросФлага = НЕ ТекущиеДанные.IsUserSettings;
	
	Если ( СбросФлага ) Тогда
		
		ДополнительныеПараметры = Новый ФиксированнаяСтруктура("Ключ, CommitSHA", Параметры.КлючЗаписи, ТекущиеДанные.CommitSHA);

		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНастройкиПоУмолчанию", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Сбросить настройки на значения по умолчанию?'"), Режим);
		
	Иначе
		
		УстановитьРежимРедактированияJSON( ТекущиеДанные.IsUserSettings );
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКоммиты

&НаКлиенте
Процедура CommitsПриАктивизацииСтроки(Элемент)
	
	Если ( Элемент.ТекущиеДанные = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьРежимРедактированияJSON( Элемент.ТекущиеДанные.IsUserSettings );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьJSON(Команда)
	
	Перем ТекущиеДанные;
	Перем СохраняемыеДанные;
	Перем ДополнительныеПараметры;
	Перем Режим;
	Перем Оповещение;
	
	ТекущиеДанные = Элементы.Commits.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеДанные = Новый Структура("CommitSHA, JSON", ТекущиеДанные.CommitSHA, ТекущиеДанные.JSON);
	ДополнительныеПараметры = Новый ФиксированнаяСтруктура("Ключ, СохраняемыеДанные", Параметры.КлючЗаписи, СохраняемыеДанные);
	
	Если ЕстьПользовательскиеНастройки(ДополнительныеПараметры) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСохранитьJSON", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Пользовательские настройки уже существуют, перезаписать?'"), Режим);
	Иначе
		СохранитьJSONНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидФормы( Знач ИмяКоманды )
	
	Если ( ИмяКоманды = "ОткрытьТекстЗапросаВРедактореJSON" ) Тогда

		ЭтотОбъект.ЭтоЗапрос = Истина;
		ЭтаФорма.Заголовок = "Содержимое запроса";

	ИначеЕсли ( ИмяКоманды = "ОткрытьНастройкиМаршрутизацииВРедактореJSON" ) Тогда
		
		ЭтотОбъект.ЭтоЗапрос = Ложь;
		ЭтаФорма.Заголовок = "Настройка маршрутизации";
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Недопустимая команда открытия редактора JSON.'");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы( Знач КлючЗаписи )
	
	Перем Query;
	Перем QueryCommits;
	Перем Settings;
	Перем UserSettings;
	Перем НоваяСтрока;
	
	Query = ОбработчикиСобытий.ЗагрузитьДанныеЗапроса( КлючЗаписи.ОбработчикСобытия, КлючЗаписи.Ключ );
	
	Если ( Query = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( ЭтотОбъект.ЭтоЗапрос ) Тогда
		
		НоваяСтрока = ЭтотОбъект.Commits.Добавить();
		НоваяСтрока.JSON = Query.Получить( "json" );
		
	Иначе

		QueryCommits = Query.Получить( "commits" );
		
		Для каждого Commit Из QueryCommits Цикл
			
			НоваяСтрока = ЭтотОбъект.Commits.Добавить();
			НоваяСтрока.CommitSHA = Commit.Получить( "id" );
			
			UserSettings = Commit.Получить( "user_settings" );
			
			Settings = ?( UserSettings = Неопределено, Commit.Получить("settings"),  UserSettings );
			
			Если ( Settings = Неопределено ) Тогда

				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока.JSON = Settings.Получить( "json" );
			НоваяСтрока.IsUserSettings = ( UserSettings <> Неопределено );
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	Если ( ЭтотОбъект.ЭтоЗапрос ) Тогда
		
		Элементы.ГруппаCommits.Видимость = Ложь;
		Элементы.ГруппаПользовательскийВариант.Видимость = Ложь;
		Элементы.CommitsJSONQuery.Видимость = Истина;
		
	Иначе
		
		Элементы.CommitsJSONRouting.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры



// Проверяет наличие записи о пользовательских настройках маршрутизации в данных тела запроса для определенного коммита.
// 
// Параметры:
//	ДанныеТелаЗапроса - Соответствие - преобразованные в Соответствие данные HTTP-запроса;
// 	ИдентификаторКоммита - Строка - идентификационный номер коммита;
// Возвращаемое значение:
// 	Булево - Истина, пользовательские настройки для коммита существуют, иначе - Ложь;
&НаСервереБезКонтекста
Функция ЕстьПользовательскиеНастройкиВДанныхКоммита(Знач ДанныеТелаЗапроса, Знач ИдентификаторКоммита)
	
	Перем ДанныеКоммита;
	Перем Результат;
	
	Результат = Ложь;
	
	ДанныеКоммита = ПолучитьДанныеКоммитаИзТелаЗапроса(ДанныеТелаЗапроса, ИдентификаторКоммита);
	Если ДанныеКоммита = Неопределено ИЛИ ТипЗнч(ДанныеКоммита) <> Тип("Соответствие") Тогда
		Возврат Результат;
	КонецЕсли;
		
	ПользовательскиеНастройки = ДанныеКоммита.Получить("user_settings");
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


// Получение данных тела запроса по идентификационному номеру коммита.
// 
// Параметры:
//	ДанныеТелаЗапроса - Соответствие - преобразованные в Соответствие данные HTTP-запроса;
// 	ИскомыйИдентификатор - Строка - идентификационный номер коммита;
// Возвращаемое значение:
// 	Неопределено, Соответствие - возвращает коллекцию данных по коммиту, либо Неопределено, если данные не найдены;
&НаСервереБезКонтекста 
Функция ПолучитьДанныеКоммитаИзТелаЗапроса(Знач ДанныеТелаЗапроса, Знач ИскомыйИдентификатор = "")
	
	Перем Результат;
	Перем Коммиты;
	Перем Идентификатор;
	
	Результат = Неопределено;
	
	Если ТипЗнч(ДанныеТелаЗапроса) <> Тип("Соответствие") ИЛИ ПустаяСтрока(ИскомыйИдентификатор) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Коммиты = ДанныеТелаЗапроса.Получить("commits");
	
	Если Коммиты = Неопределено ИЛИ ТипЗнч(Коммиты) <> Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Коммит Из Коммиты Цикл

		Идентификатор = Коммит.Получить("id");
		Если Идентификатор = Неопределено ИЛИ Идентификатор <> ИскомыйИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Коммит;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции



// Удаляет пользовательский вариант настроек маршрутизации для определенного коммита в данных тела запроса.
// 
// Параметры:
//	ДанныеТелаЗапроса - Соответствие - преобразованные в Соответствие данные HTTP-запроса;
// 	ИдентификаторКоммита - Строка - идентификационный номер коммита;
// 	НастройкиПоУмолчанию - Строка - (возвращаемый параметр), текст настройки маршрутизации в формате JSON
// 		из файла настроек внешнего хранилища;
&НаСервереБезКонтекста
Процедура УдалитьПользовательскиеНастройкиВДанныхКоммита(Знач ДанныеТелаЗапроса,
															Знач ИдентификаторКоммита,
															НастройкиПоУмолчанию = "")
	
	Перем ДанныеКоммита;
	Перем Настройки;
	
	ДанныеКоммита = ПолучитьДанныеКоммитаИзТелаЗапроса(ДанныеТелаЗапроса, ИдентификаторКоммита);
	Если ДанныеКоммита = Неопределено ИЛИ ТипЗнч(ДанныеКоммита) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКоммита.Удалить("user_settings");
	Настройки = ДанныеКоммита.Получить("settings");
	
	Если Настройки <> Неопределено Тогда
		НастройкиПоУмолчанию = Настройки.Получить("json");
	КонецЕсли;

КонецПроцедуры

// Добавляет пользовательский вариант настроек маршрутизации для определенного коммита в данных тела запроса.
// 
// Параметры:
//	ДанныеТелаЗапроса - Соответствие - (возвращаемое значение), преобразованные в Соответствие данные HTTP-запроса;
// 	ИдентификаторКоммита - Строка - идентификационный номер коммита;
// 	JSON - Строка - текст настроек маршрутизации в формате JSON;
&НаСервереБезКонтекста
Процедура ДополнитьДанныеТелаЗапросаПользовательскимиНастройками(Знач ИдентификаторКоммита,
																	Знач JSON,
																	ДанныеТелаЗапроса) Экспорт
	
	Перем ДанныеКоммита;
	Перем ПользовательскиеНастройки;
	Перем Запись;
	Перем Поток;
	
	ДанныеКоммита = ПолучитьДанныеКоммитаИзТелаЗапроса(ДанныеТелаЗапроса, ИдентификаторКоммита);
	
	Если ДанныеКоммита = Неопределено ИЛИ ТипЗнч(ДанныеКоммита) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	
	Поток = ПолучитьДвоичныеДанныеИзСтроки( JSON, КодировкаТекста.UTF8 ).ОткрытьПотокДляЧтения();
	ПользовательскиеНастройки = КоннекторHTTP.JsonВОбъект( Поток );		
	ОбщегоНазначения.ДополнитьКоллекциюТекстомИзПотока( Поток, "json", ПользовательскиеНастройки );
	ДанныеКоммита.Вставить("user_settings", ПользовательскиеНастройки);		
	

КонецПроцедуры
































&НаКлиенте
Процедура УстановитьРежимРедактированияJSON( Знач Редактировать = Ложь )
	
	Перем ЭлементРедактированияJSON;
	
	Если ( ЭтотОбъект.ЭтоЗапрос ) Тогда
		
		ЭлементРедактированияJSON  = Элементы.CommitsJSONQuery;
		
	Иначе

		ЭлементРедактированияJSON = Элементы.CommitsJSONRouting;
		
	КонецЕсли;
	
	ЭлементРедактированияJSON.ТолькоПросмотр = НЕ Редактировать;
	Элементы.СохранитьJSON.Доступность = Редактировать;
		
	
//	Если ЭтотОбъект.IsUserSettings <> Состояние Тогда
//		ЭтотОбъект.IsUserSettings = Состояние;
//	КонецЕсли;
//	
//	Элементы.ТекстJSON.ТолькоПросмотр = НЕ Состояние;
//	Элементы.СохранитьJSON.Доступность = Состояние;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПользовательскиеНастройки(Знач Параметры)

	Перем ДанныеТелаЗапроса;
	Перем Результат;
	
	Результат = Ложь;

	// Концептуально не храним данные на форме, поэтому будем считывать с регистра каждый раз.
	ДанныеТелаЗапроса = ОбработчикиСобытий.ЗагрузитьДанныеЗапроса( Параметры.Ключ.ОбработчикСобытия, Параметры.Ключ.Ключ );
	Если ДанныеТелаЗапроса = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = ЕстьПользовательскиеНастройкиВДанныхКоммита(ДанныеТелаЗапроса,
																			Параметры.СохраняемыеДанные.CommitSHA);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаСохранитьJSON(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	СохранитьJSONНаКлиенте(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНастройкиПоУмолчанию(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Перем НастройкиПоУмолчанию;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		УстановитьРежимРедактированияJSON(НЕ ЭтотОбъект.IsUserSettings);
        Возврат;
	КонецЕсли;

	НастройкиПоУмолчанию = УдалитьПользовательскиеНастройки(ДополнительныеПараметры);
	
	ЭтотОбъект.ТекстJSON = НастройкиПоУмолчанию;
	
	ПривестиВСоответствиеТекущиеДанныеКоммитаИРеквизитовФормы();
	УстановитьРежимРедактированияJSON(ЭтотОбъект.ЭтоПользовательскийВариант);

КонецПроцедуры

&НаКлиенте
Процедура ПривестиВСоответствиеТекущиеДанныеКоммитаИРеквизитовФормы()
	
	Если Элементы.Commits.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Commits.ТекущиеДанные.IsUserSettings = ЭтотОбъект.IsUserSettings;
	Элементы.Commits.ТекущиеДанные.JSON = ЭтотОбъект.ТекстJSON;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьПользовательскиеНастройки(Знач Параметры)
	
	Перем ДанныеТелаЗапроса;
	Перем Результат;
	
	Результат = "";

	// Концептуально не храним данные на форме, поэтому будем считывать с регистра каждый раз.
	ДанныеТелаЗапроса = ОбработчикиСобытий.ЗагрузитьДанныеЗапроса( Параметры.Ключ.ОбработчикСобытия, Параметры.Ключ.Ключ );
	Если ДанныеТелаЗапроса = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	УдалитьПользовательскиеНастройкиВДанныхКоммита(ДанныеТелаЗапроса, Параметры.Коммит, Результат);
	Если НЕ ПустаяСтрока(Результат) Тогда
		ОбработчикиСобытий.СохранитьДанныеЗапроса(Параметры.Ключ.ОбработчикСобытия, Параметры.Ключ.Ключ, ДанныеТелаЗапроса ); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьJSONНаКлиенте(Знач ДополнительныеПараметры)
	
	Перем ИнформацияОбОшибке;
	Перем ТекстПричиныОшибки;
	Перем ДополнительнаяИнформация; 
	
	Попытка
		
		СохранитьJSONНаСервере(ДополнительныеПараметры);
		
	Исключение
		
		ТекстПричиныОшибки = НСтр("ru = 'Непредвиденный символ при чтении JSON'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ( ИнформацияОбОшибке.ЯвляетсяОшибкойКатегории(КатегорияОшибки.ОшибкаВоВремяВыполненияВстроенногоЯзыка)
			И ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке) = ТекстПричиныОшибки ) Тогда

			ДополнительнаяИнформация = НСтр("ru = 'Текст должен быть в формате JSON.'");
			ОбработкаОшибок.ПоказатьИнформациюОбОшибке( ИнформацияОбОшибке,
														ВариантОтображенияСообщенияОбОшибке.КраткоеПредставлениеОшибки,
														ДополнительнаяИнформация );
	
		Иначе
			
			ОбработкаОшибок.ПоказатьИнформациюОбОшибке( ИнформацияОбОшибке );
			
		КонецЕсли;
		
	КонецПопытки;
	

	
	//ЭтотОбъект.ТекстJSON = ДополнительныеПараметры.СохраняемыеДанные.JSON;
	
	//ПривестиВСоответствиеТекущиеДанныеКоммитаИРеквизитовФормы();
	
	//УстановитьРежимРедактированияJSON(ЭтотОбъект.ЭтоПользовательскийВариант);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьJSONНаСервере(Знач Параметры)
	
	Перем ДанныеТелаЗапроса;
	
	// Концептуально не храним данные на форме, поэтому будем считывать с регистра каждый раз.
	ДанныеТелаЗапроса = ОбработчикиСобытий.ЗагрузитьДанныеЗапроса( Параметры.Ключ.ОбработчикСобытия, Параметры.Ключ.Ключ );
	Если ДанныеТелаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьДанныеТелаЗапросаПользовательскимиНастройками(Параметры.СохраняемыеДанные.CommitSHA,
			Параметры.СохраняемыеДанные.JSON, ДанныеТелаЗапроса);
	
	
	ОбработчикиСобытий.СохранитьДанныеЗапроса(Параметры.Ключ.ОбработчикСобытия, Параметры.Ключ.Ключ, ДанныеТелаЗапроса );	


КонецПроцедуры


#КонецОбласти